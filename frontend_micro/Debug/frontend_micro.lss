
frontend_micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002070  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024e  00800060  00002070  00002104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008002ae  008002ae  00002352  2**0
                  ALLOC
  3 .stab         000025bc  00000000  00000000  00002354  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a1  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00006104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00008113  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009283  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a284  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a424  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a6e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <main>
      8a:	0c 94 36 10 	jmp	0x206c	; 0x206c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e9       	ldi	r26, 0x92	; 146
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e9       	ldi	r24, 0x92	; 146
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e6 56       	subi	r30, 0x66	; 102
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <KEYPAD_Init>:
 * Init module.
 */

static uint8 getLetter(uint8,uint8);
void KEYPAD_Init()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Init pins.
	 	 * Rows Pins as output.
	 	 * Columns Pins as input.
	 */
	KEYPAD_ROWS_DDR  |=  0b00001111;
     cde:	a4 e3       	ldi	r26, 0x34	; 52
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e4 e3       	ldi	r30, 0x34	; 52
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 60       	ori	r24, 0x0F	; 15
     cea:	8c 93       	st	X, r24
	KEYPAD_ROWS_PORT |=  0b00001111;
     cec:	a5 e3       	ldi	r26, 0x35	; 53
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e5 e3       	ldi	r30, 0x35	; 53
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 60       	ori	r24, 0x0F	; 15
     cf8:	8c 93       	st	X, r24
	KEYPAD_COLUMNS_DDR = KEYPAD_COLUMNS_DDR & 0b00001111;
	//Pull-Up Resistor.
	KEYPAD_COLUMNS_PORT = KEYPAD_COLUMNS_PORT | 0b11110000;
#elif KEY_PAD_COLUMNS == 3
	//Input.
	KEYPAD_COLUMNS_DDR  = KEYPAD_COLUMNS_DDR & 0b00011111;
     cfa:	a4 e3       	ldi	r26, 0x34	; 52
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e4 e3       	ldi	r30, 0x34	; 52
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 71       	andi	r24, 0x1F	; 31
     d06:	8c 93       	st	X, r24
	//Pull-Up Resistor.
	KEYPAD_COLUMNS_PORT = KEYPAD_COLUMNS_PORT | 0b11100000;
     d08:	a5 e3       	ldi	r26, 0x35	; 53
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e5 e3       	ldi	r30, 0x35	; 53
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 6e       	ori	r24, 0xE0	; 224
     d14:	8c 93       	st	X, r24
#else
	#error "Please Choose Number of columns 3 or 4 only"
#endif

	//Ground all rows.
	KEYPAD_ROWS_PORT = KEYPAD_ROWS_PORT & 0xF0;
     d16:	a5 e3       	ldi	r26, 0x35	; 53
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e5 e3       	ldi	r30, 0x35	; 53
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 7f       	andi	r24, 0xF0	; 240
     d22:	8c 93       	st	X, r24
}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <KEYPAD_getPressedKey>:
/*
 * Function used to get key which pressed.
 */
uint8 KEYPAD_getPressedKey()
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	61 97       	sbiw	r28, 0x11	; 17
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
#if KEY_PAD_COLUMNS == 3
	uint8 mask = 7;
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	89 8b       	std	Y+17, r24	; 0x11
#elif KEY_PAD_COLUMNS == 4
	uint8 mask = 15;
#endif
	uint8 row = 0,col = 0;
     d42:	18 8a       	std	Y+16, r1	; 0x10
     d44:	1f 86       	std	Y+15, r1	; 0x0f
	while( True )
	{

		if (((KEYPAD_COLUMNS_PIN) & (0b11100000)) != 0b11100000)
     d46:	e3 e3       	ldi	r30, 0x33	; 51
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	80 7e       	andi	r24, 0xE0	; 224
     d52:	90 70       	andi	r25, 0x00	; 0
     d54:	80 3e       	cpi	r24, 0xE0	; 224
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <KEYPAD_getPressedKey+0x32>
     d5a:	c3 c0       	rjmp	.+390    	; 0xee2 <KEYPAD_getPressedKey+0x1b8>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	a0 ea       	ldi	r26, 0xA0	; 160
     d62:	b1 e4       	ldi	r27, 0x41	; 65
     d64:	8b 87       	std	Y+11, r24	; 0x0b
     d66:	9c 87       	std	Y+12, r25	; 0x0c
     d68:	ad 87       	std	Y+13, r26	; 0x0d
     d6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d70:	8d 85       	ldd	r24, Y+13	; 0x0d
     d72:	9e 85       	ldd	r25, Y+14	; 0x0e
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	4a ef       	ldi	r20, 0xFA	; 250
     d7a:	54 e4       	ldi	r21, 0x44	; 68
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	8f 83       	std	Y+7, r24	; 0x07
     d86:	98 87       	std	Y+8, r25	; 0x08
     d88:	a9 87       	std	Y+9, r26	; 0x09
     d8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d8c:	6f 81       	ldd	r22, Y+7	; 0x07
     d8e:	78 85       	ldd	r23, Y+8	; 0x08
     d90:	89 85       	ldd	r24, Y+9	; 0x09
     d92:	9a 85       	ldd	r25, Y+10	; 0x0a
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e8       	ldi	r20, 0x80	; 128
     d9a:	5f e3       	ldi	r21, 0x3F	; 63
     d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da0:	88 23       	and	r24, r24
     da2:	2c f4       	brge	.+10     	; 0xdae <KEYPAD_getPressedKey+0x84>
		__ticks = 1;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9e 83       	std	Y+6, r25	; 0x06
     daa:	8d 83       	std	Y+5, r24	; 0x05
     dac:	3f c0       	rjmp	.+126    	; 0xe2c <KEYPAD_getPressedKey+0x102>
	else if (__tmp > 65535)
     dae:	6f 81       	ldd	r22, Y+7	; 0x07
     db0:	78 85       	ldd	r23, Y+8	; 0x08
     db2:	89 85       	ldd	r24, Y+9	; 0x09
     db4:	9a 85       	ldd	r25, Y+10	; 0x0a
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	3f ef       	ldi	r19, 0xFF	; 255
     dba:	4f e7       	ldi	r20, 0x7F	; 127
     dbc:	57 e4       	ldi	r21, 0x47	; 71
     dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc2:	18 16       	cp	r1, r24
     dc4:	4c f5       	brge	.+82     	; 0xe18 <KEYPAD_getPressedKey+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dca:	8d 85       	ldd	r24, Y+13	; 0x0d
     dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	51 e4       	ldi	r21, 0x41	; 65
     dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <KEYPAD_getPressedKey+0xe4>
     df0:	88 ec       	ldi	r24, 0xC8	; 200
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <KEYPAD_getPressedKey+0xd2>
     e00:	9c 83       	std	Y+4, r25	; 0x04
     e02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	9e 83       	std	Y+6, r25	; 0x06
     e0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	9e 81       	ldd	r25, Y+6	; 0x06
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	69 f7       	brne	.-38     	; 0xdf0 <KEYPAD_getPressedKey+0xc6>
     e16:	14 c0       	rjmp	.+40     	; 0xe40 <KEYPAD_getPressedKey+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e18:	6f 81       	ldd	r22, Y+7	; 0x07
     e1a:	78 85       	ldd	r23, Y+8	; 0x08
     e1c:	89 85       	ldd	r24, Y+9	; 0x09
     e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	9e 83       	std	Y+6, r25	; 0x06
     e2a:	8d 83       	std	Y+5, r24	; 0x05
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <KEYPAD_getPressedKey+0x10e>
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
			 * Key Is pressed.
			 * Delay 20 ms to ensure this pressed from user not spikes error.
			 * and prevent multiply interp.
			*/
			_delay_ms(20);
			for( row = 0;row < KEY_PAD_ROWS; row++  )
     e40:	18 8a       	std	Y+16, r1	; 0x10
     e42:	4a c0       	rjmp	.+148    	; 0xed8 <KEYPAD_getPressedKey+0x1ae>
			{
				//Make this row to be grounded and make all the other high impedence.
				KEYPAD_ROWS_PORT = KEYPAD_ROWS_PORT | 0x0F;
     e44:	a5 e3       	ldi	r26, 0x35	; 53
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e5 e3       	ldi	r30, 0x35	; 53
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 60       	ori	r24, 0x0F	; 15
     e50:	8c 93       	st	X, r24
				KEYPAD_ROWS_PORT = KEYPAD_ROWS_PORT & (~(1 << row));
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	88 89       	ldd	r24, Y+16	; 0x10
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <KEYPAD_getPressedKey+0x146>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <KEYPAD_getPressedKey+0x142>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
				for( col = 5;col < 8; col++ )
     e7a:	85 e0       	ldi	r24, 0x05	; 5
     e7c:	8f 87       	std	Y+15, r24	; 0x0f
     e7e:	26 c0       	rjmp	.+76     	; 0xecc <KEYPAD_getPressedKey+0x1a2>
				{
					if(!(KEYPAD_COLUMNS_PIN & (1 << col)))
     e80:	e3 e3       	ldi	r30, 0x33	; 51
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a9 01       	movw	r20, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <KEYPAD_getPressedKey+0x16e>
     e94:	55 95       	asr	r21
     e96:	47 95       	ror	r20
     e98:	8a 95       	dec	r24
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <KEYPAD_getPressedKey+0x16a>
     e9c:	ca 01       	movw	r24, r20
     e9e:	81 70       	andi	r24, 0x01	; 1
     ea0:	90 70       	andi	r25, 0x00	; 0
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	81 f4       	brne	.+32     	; 0xec6 <KEYPAD_getPressedKey+0x19c>
					{
						//get letter.
						return getLetter( row, (col - 5) );
     ea6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea8:	98 2f       	mov	r25, r24
     eaa:	95 50       	subi	r25, 0x05	; 5
     eac:	88 89       	ldd	r24, Y+16	; 0x10
     eae:	69 2f       	mov	r22, r25
     eb0:	0e 94 79 07 	call	0xef2	; 0xef2 <getLetter>
			//Ground all output pins.
			KEYPAD_ROWS_PORT &= 0xF0;
		}

	}
}
     eb4:	61 96       	adiw	r28, 0x11	; 17
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret
			for( row = 0;row < KEY_PAD_ROWS; row++  )
			{
				//Make this row to be grounded and make all the other high impedence.
				KEYPAD_ROWS_PORT = KEYPAD_ROWS_PORT | 0x0F;
				KEYPAD_ROWS_PORT = KEYPAD_ROWS_PORT & (~(1 << row));
				for( col = 5;col < 8; col++ )
     ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	8f 87       	std	Y+15, r24	; 0x0f
     ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ece:	88 30       	cpi	r24, 0x08	; 8
     ed0:	b8 f2       	brcs	.-82     	; 0xe80 <KEYPAD_getPressedKey+0x156>
			 * Key Is pressed.
			 * Delay 20 ms to ensure this pressed from user not spikes error.
			 * and prevent multiply interp.
			*/
			_delay_ms(20);
			for( row = 0;row < KEY_PAD_ROWS; row++  )
     ed2:	88 89       	ldd	r24, Y+16	; 0x10
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	88 8b       	std	Y+16, r24	; 0x10
     ed8:	88 89       	ldd	r24, Y+16	; 0x10
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	08 f4       	brcc	.+2      	; 0xee0 <KEYPAD_getPressedKey+0x1b6>
     ede:	b2 cf       	rjmp	.-156    	; 0xe44 <KEYPAD_getPressedKey+0x11a>
     ee0:	32 cf       	rjmp	.-412    	; 0xd46 <KEYPAD_getPressedKey+0x1c>
				}
			}
		}else
		{
			//Ground all output pins.
			KEYPAD_ROWS_PORT &= 0xF0;
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 7f       	andi	r24, 0xF0	; 240
     eee:	8c 93       	st	X, r24
     ef0:	2a cf       	rjmp	.-428    	; 0xd46 <KEYPAD_getPressedKey+0x1c>

00000ef2 <getLetter>:

	}
}

static uint8 getLetter(uint8 row_number, uint8 column_number)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <getLetter+0x6>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	6a 83       	std	Y+2, r22	; 0x02
	return KEY_PAD_CONSTRUCTION[row_number][column_number];
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	48 2f       	mov	r20, r24
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	c9 01       	movw	r24, r18
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	84 0f       	add	r24, r20
     f18:	95 1f       	adc	r25, r21
     f1a:	fc 01       	movw	r30, r24
     f1c:	e6 56       	subi	r30, 0x66	; 102
     f1e:	fd 4f       	sbci	r31, 0xFD	; 253
     f20:	80 81       	ld	r24, Z
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <UART_init>:

/*
 * UART init.
 */
void UART_init()
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
	 	 * USBS -> Stop bit select.--init--
	 	 * UCSZ2:1 -> Helps choosing the number of data bits in your frame .. standard 8-bit 3 (Initial Value is 3 by default).--init--.
	 * UBRRL - UBRRH -> set baud rate.--init--.
	 	 * URSEL -> must be set to zero when writing UBRRH.
	 */
	SET_BIT(UCSRC, URSEL);
     f34:	a0 e4       	ldi	r26, 0x40	; 64
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e0 e4       	ldi	r30, 0x40	; 64
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC, UMSEL);//ASYNC Mode.
     f42:	a0 e4       	ldi	r26, 0x40	; 64
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e0 e4       	ldi	r30, 0x40	; 64
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7b       	andi	r24, 0xBF	; 191
     f4e:	8c 93       	st	X, r24

	/*
	 * Set BaudRate.
	 */
	CLEAR_BIT(UCSRC, URSEL);
     f50:	a0 e4       	ldi	r26, 0x40	; 64
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e0 e4       	ldi	r30, 0x40	; 64
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8f 77       	andi	r24, 0x7F	; 127
     f5c:	8c 93       	st	X, r24
	UBRRL = UBRR_VALUE;
     f5e:	e9 e2       	ldi	r30, 0x29	; 41
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	87 e6       	ldi	r24, 0x67	; 103
     f64:	80 83       	st	Z, r24
	UBRRH = UBRR_VALUE >> 8;
     f66:	e0 e4       	ldi	r30, 0x40	; 64
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	10 82       	st	Z, r1
}
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <UART_sendByte>:

/*
 * UART sending byte.
 */
void UART_sendByte(const uint8 byte)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	89 83       	std	Y+1, r24	; 0x01
		 	 * RXCIE -> RX complete interrupt enable.
		 	 * TXCIE -> TX complete interrupt enable.
		 	 * RXEN  -> Receiver Enable.
		 	 * TXEN  -> Transmitter Enable. --sendByte--.
	*/
	SET_BIT(UCSRB, TXEN);
     f7e:	aa e2       	ldi	r26, 0x2A	; 42
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ea e2       	ldi	r30, 0x2A	; 42
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 60       	ori	r24, 0x08	; 8
     f8a:	8c 93       	st	X, r24
	UDR = byte;
     f8c:	ec e2       	ldi	r30, 0x2C	; 44
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(UCSRA, UDRE) );//Polling Operation.
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	80 72       	andi	r24, 0x20	; 32
     fa0:	90 70       	andi	r25, 0x00	; 0
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	b9 f3       	breq	.-18     	; 0xf94 <UART_sendByte+0x22>
}
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <UART_receiveByte>:

/*
 * UART receive byte.
 */
uint8 UART_receiveByte()
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
			 * RXCIE -> RX complete interrupt enable.
			 * TXCIE -> TX complete interrupt enable.
			 * RXEN  -> Receiver Enable.--receiveByte--.
			 * TXEN  -> Transmitter Enable. --sendByte--.
	*/
	SET_BIT(UCSRB, RXEN);
     fb6:	aa e2       	ldi	r26, 0x2A	; 42
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ea e2       	ldi	r30, 0x2A	; 42
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 61       	ori	r24, 0x10	; 16
     fc2:	8c 93       	st	X, r24
	while( BIT_IS_CLEAR(UCSRA , RXC) );
     fc4:	eb e2       	ldi	r30, 0x2B	; 43
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	88 23       	and	r24, r24
     fcc:	dc f7       	brge	.-10     	; 0xfc4 <UART_receiveByte+0x16>
	//RXC Cleared by CPU when no data in data-in buffer.
	return UDR;
     fce:	ec e2       	ldi	r30, 0x2C	; 44
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <UART_sendString>:

/*
 * UART sendString.
 */
void UART_sendString(uint8* string)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <UART_sendString+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <UART_sendString+0x8>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 * To send string and understandable by the receiver .. first byte will have the number of bytes coming from transmitter.
	 */
	uint8 length = strlen( (const char*)string );
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <strlen>
     ff2:	8a 83       	std	Y+2, r24	; 0x02

	/*
	 * Sending length of string first.
	 */
	UART_sendByte(length);
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
	/*
	 * Then sending byte byte to receiver.
	 */
	uint8 i = 0;
     ffa:	19 82       	std	Y+1, r1	; 0x01
     ffc:	0e c0       	rjmp	.+28     	; 0x101a <UART_sendString+0x40>
	while( *(string + i) != '\0' )
	{
		UART_sendByte( *(string + i) );
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	fc 01       	movw	r30, r24
    100a:	e2 0f       	add	r30, r18
    100c:	f3 1f       	adc	r31, r19
    100e:	80 81       	ld	r24, Z
    1010:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
		i++;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(length);
	/*
	 * Then sending byte byte to receiver.
	 */
	uint8 i = 0;
	while( *(string + i) != '\0' )
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	fc 01       	movw	r30, r24
    1026:	e2 0f       	add	r30, r18
    1028:	f3 1f       	adc	r31, r19
    102a:	80 81       	ld	r24, Z
    102c:	88 23       	and	r24, r24
    102e:	39 f7       	brne	.-50     	; 0xffe <UART_sendString+0x24>
	{
		UART_sendByte( *(string + i) );
		i++;
	}
}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <UART_receiveString>:

/*
 * UART receive string.
 */
void UART_receiveString(uint8* string)
{
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <UART_receiveString+0xa>
    1048:	00 d0       	rcall	.+0      	; 0x104a <UART_receiveString+0xc>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 * First coming byte is the length of string.
	 */
	uint8 length = UART_receiveByte();
    1052:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_receiveByte>
    1056:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1058:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Loop to get all string.
	 */
	do
	{
		*(string + i) = UART_receiveByte();
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	8c 01       	movw	r16, r24
    1066:	02 0f       	add	r16, r18
    1068:	13 1f       	adc	r17, r19
    106a:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_receiveByte>
    106e:	f8 01       	movw	r30, r16
    1070:	80 83       	st	Z, r24
		i++;
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	89 83       	std	Y+1, r24	; 0x01
	}while( i < length );
    1078:	99 81       	ldd	r25, Y+1	; 0x01
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	98 17       	cp	r25, r24
    107e:	68 f3       	brcs	.-38     	; 0x105a <UART_receiveString+0x1c>
	//Put Null Operator.
	*(string + i) = '\0';
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	fc 01       	movw	r30, r24
    108c:	e2 0f       	add	r30, r18
    108e:	f3 1f       	adc	r31, r19
    1090:	10 82       	st	Z, r1
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	08 95       	ret

000010a4 <LCD_init>:

/*
 * Init LCD.
 */
void LCD_init()
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	 * init all ports D0 .. D7 as output port.
	 * RS, RW, ENABLE pins     as output port.
	 * in 8-bit mode to init.
	 */
	//init RS, RW, ENABLE pins.
	SET_BIT(LCD_CONTROL_DDR, LCD_RS);
    10ac:	a7 e3       	ldi	r26, 0x37	; 55
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e7 e3       	ldi	r30, 0x37	; 55
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	80 62       	ori	r24, 0x20	; 32
    10b8:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_RW);
    10ba:	a7 e3       	ldi	r26, 0x37	; 55
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	80 64       	ori	r24, 0x40	; 64
    10c6:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_ENABLE_PIN);
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 68       	ori	r24, 0x80	; 128
    10d4:	8c 93       	st	X, r24
	LCD_sendCommand(0x38);
#elif LCD_MODE == 4
#ifdef HIGH_PINS
	LCD_DDR = LCD_DDR | 0xF0;
#else
	LCD_DDR = LCD_DDR  | 0x0F;
    10d6:	a7 e3       	ldi	r26, 0x37	; 55
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e7 e3       	ldi	r30, 0x37	; 55
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8f 60       	ori	r24, 0x0F	; 15
    10e2:	8c 93       	st	X, r24
#endif
	LCD_sendCommand(0x33);
    10e4:	83 e3       	ldi	r24, 0x33	; 51
    10e6:	0e 94 87 08 	call	0x110e	; 0x110e <LCD_sendCommand>
	LCD_sendCommand(0x32);
    10ea:	82 e3       	ldi	r24, 0x32	; 50
    10ec:	0e 94 87 08 	call	0x110e	; 0x110e <LCD_sendCommand>
	LCD_sendCommand(0x28);
    10f0:	88 e2       	ldi	r24, 0x28	; 40
    10f2:	0e 94 87 08 	call	0x110e	; 0x110e <LCD_sendCommand>
#else
	#error "Error Wrong mode for LCD"
#endif
	LCD_sendCommand(0x0E);
    10f6:	8e e0       	ldi	r24, 0x0E	; 14
    10f8:	0e 94 87 08 	call	0x110e	; 0x110e <LCD_sendCommand>
	LCD_sendCommand(0x01);
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	0e 94 87 08 	call	0x110e	; 0x110e <LCD_sendCommand>
	wait(1);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	0e 94 a0 09 	call	0x1340	; 0x1340 <wait>
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <LCD_sendCommand>:

/*
 * LCD send Command.
 */
void LCD_sendCommand(uint8 cmd)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	89 83       	std	Y+1, r24	; 0x01
	 	 * E enable bit high-to-low pulse.
	 	 * delay about 20ms.
	 	 * send cmd.
	 	 * delay about 20ms.
	 */
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RS);
    111a:	a8 e3       	ldi	r26, 0x38	; 56
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e3       	ldi	r30, 0x38	; 56
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 7d       	andi	r24, 0xDF	; 223
    1126:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW);
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8f 7b       	andi	r24, 0xBF	; 191
    1134:	8c 93       	st	X, r24
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (cmd << 4);
	high_to_low_pulse();
#else
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0xF0) |  (cmd >> 4);
    1136:	a8 e3       	ldi	r26, 0x38	; 56
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e8 e3       	ldi	r30, 0x38	; 56
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	98 2f       	mov	r25, r24
    1142:	90 7f       	andi	r25, 0xF0	; 240
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	82 95       	swap	r24
    1148:	8f 70       	andi	r24, 0x0F	; 15
    114a:	89 2b       	or	r24, r25
    114c:	8c 93       	st	X, r24
	high_to_low_pulse();
    114e:	0e 94 2d 0a 	call	0x145a	; 0x145a <high_to_low_pulse>
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0xF0) |  (cmd & 0x0F);
    1152:	a8 e3       	ldi	r26, 0x38	; 56
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e8 e3       	ldi	r30, 0x38	; 56
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	98 2f       	mov	r25, r24
    115e:	90 7f       	andi	r25, 0xF0	; 240
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	8f 70       	andi	r24, 0x0F	; 15
    1164:	89 2b       	or	r24, r25
    1166:	8c 93       	st	X, r24
	high_to_low_pulse();
    1168:	0e 94 2d 0a 	call	0x145a	; 0x145a <high_to_low_pulse>
#endif

#endif
}
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <LCD_displayCharacter>:

/*
 * LCD display Character.
 */
void LCD_displayCharacter(uint8 character)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
	 * E High-to-low pulse.
	 * delay.
	 * Write Data.
	 * delay to latch.
	 */
	SET_BIT(LCD_CONTROL_PORT,   LCD_RS);
    1180:	a8 e3       	ldi	r26, 0x38	; 56
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 62       	ori	r24, 0x20	; 32
    118c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW);
    118e:	a8 e3       	ldi	r26, 0x38	; 56
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e8 e3       	ldi	r30, 0x38	; 56
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7b       	andi	r24, 0xBF	; 191
    119a:	8c 93       	st	X, r24
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (character << 4);
	high_to_low_pulse();
#else
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0xF0) |  (character >> 4);
    119c:	a8 e3       	ldi	r26, 0x38	; 56
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e8 e3       	ldi	r30, 0x38	; 56
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	98 2f       	mov	r25, r24
    11a8:	90 7f       	andi	r25, 0xF0	; 240
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	82 95       	swap	r24
    11ae:	8f 70       	andi	r24, 0x0F	; 15
    11b0:	89 2b       	or	r24, r25
    11b2:	8c 93       	st	X, r24
	high_to_low_pulse();
    11b4:	0e 94 2d 0a 	call	0x145a	; 0x145a <high_to_low_pulse>
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0xF0) |  (character & 0x0F);
    11b8:	a8 e3       	ldi	r26, 0x38	; 56
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e8 e3       	ldi	r30, 0x38	; 56
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	98 2f       	mov	r25, r24
    11c4:	90 7f       	andi	r25, 0xF0	; 240
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	8f 70       	andi	r24, 0x0F	; 15
    11ca:	89 2b       	or	r24, r25
    11cc:	8c 93       	st	X, r24
	high_to_low_pulse();
    11ce:	0e 94 2d 0a 	call	0x145a	; 0x145a <high_to_low_pulse>

#endif

#endif
}
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <LCD_displayString>:

/*
 * Display string.
 */
void LCD_displayString(uint8* string)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <LCD_displayString+0x6>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	9b 83       	std	Y+3, r25	; 0x03
    11e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    11ea:	19 82       	std	Y+1, r1	; 0x01
    11ec:	0e c0       	rjmp	.+28     	; 0x120a <LCD_displayString+0x30>

	while( *(string + i) != '\0' )
	{
		LCD_displayCharacter(*(string + i));
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	9b 81       	ldd	r25, Y+3	; 0x03
    11f8:	fc 01       	movw	r30, r24
    11fa:	e2 0f       	add	r30, r18
    11fc:	f3 1f       	adc	r31, r19
    11fe:	80 81       	ld	r24, Z
    1200:	0e 94 ba 08 	call	0x1174	; 0x1174 <LCD_displayCharacter>
		i++;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(uint8* string)
{
	uint8 i = 0;

	while( *(string + i) != '\0' )
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	fc 01       	movw	r30, r24
    1216:	e2 0f       	add	r30, r18
    1218:	f3 1f       	adc	r31, r19
    121a:	80 81       	ld	r24, Z
    121c:	88 23       	and	r24, r24
    121e:	39 f7       	brne	.-50     	; 0x11ee <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*(string + i));
		i++;
	}
}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <LCD_displayStringRowCol>:
/*
 * Display string at specific location.
 */

void LCD_displayStringRowCol(uint8* string, uint8 row, uint8 col)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <LCD_displayStringRowCol+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <LCD_displayStringRowCol+0x8>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6b 83       	std	Y+3, r22	; 0x03
    123e:	4c 83       	std	Y+4, r20	; 0x04
	LCD_goToRowColumn( row, col );
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	6c 81       	ldd	r22, Y+4	; 0x04
    1244:	0e 94 2f 09 	call	0x125e	; 0x125e <LCD_goToRowColumn>
	LCD_displayString(string);
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	0e 94 ed 08 	call	0x11da	; 0x11da <LCD_displayString>
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <LCD_goToRowColumn>:
/*
 * Go to row column.
 * This Starts address for LM044L display.
 */
void LCD_goToRowColumn(uint8 row, uint8 col)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <LCD_goToRowColumn+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <LCD_goToRowColumn+0x8>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	8a 83       	std	Y+2, r24	; 0x02
    126e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	91 05       	cpc	r25, r1
    1282:	d1 f0       	breq	.+52     	; 0x12b8 <LCD_goToRowColumn+0x5a>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	23 30       	cpi	r18, 0x03	; 3
    128a:	31 05       	cpc	r19, r1
    128c:	34 f4       	brge	.+12     	; 0x129a <LCD_goToRowColumn+0x3c>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	91 05       	cpc	r25, r1
    1296:	61 f0       	breq	.+24     	; 0x12b0 <LCD_goToRowColumn+0x52>
    1298:	1a c0       	rjmp	.+52     	; 0x12ce <LCD_goToRowColumn+0x70>
    129a:	2c 81       	ldd	r18, Y+4	; 0x04
    129c:	3d 81       	ldd	r19, Y+5	; 0x05
    129e:	23 30       	cpi	r18, 0x03	; 3
    12a0:	31 05       	cpc	r19, r1
    12a2:	71 f0       	breq	.+28     	; 0x12c0 <LCD_goToRowColumn+0x62>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	91 05       	cpc	r25, r1
    12ac:	69 f0       	breq	.+26     	; 0x12c8 <LCD_goToRowColumn+0x6a>
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <LCD_goToRowColumn+0x70>
	{
		case 1:
			address = 0x80 + col;
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	80 58       	subi	r24, 0x80	; 128
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	0b c0       	rjmp	.+22     	; 0x12ce <LCD_goToRowColumn+0x70>
			break;
		case 2:
			address = 0xC0 + col;
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	80 54       	subi	r24, 0x40	; 64
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	07 c0       	rjmp	.+14     	; 0x12ce <LCD_goToRowColumn+0x70>
			break;
		case 3:
			address = 0x94 + col;
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	8c 56       	subi	r24, 0x6C	; 108
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <LCD_goToRowColumn+0x70>
			break;
		case 4:
			address = 0xD4 + col;
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	8c 52       	subi	r24, 0x2C	; 44
    12cc:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_sendCommand( address | 0x80 );
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	0e 94 87 08 	call	0x110e	; 0x110e <LCD_sendCommand>
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <LCD_integerToString>:

/*
 * Integer to ascii.
 */
void LCD_integerToString(uint16 number)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	62 97       	sbiw	r28, 0x12	; 18
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	9a 8b       	std	Y+18, r25	; 0x12
    12fc:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16];
	itoa(number, buffer, 10);
    12fe:	89 89       	ldd	r24, Y+17	; 0x11
    1300:	9a 89       	ldd	r25, Y+18	; 0x12
    1302:	9e 01       	movw	r18, r28
    1304:	2f 5f       	subi	r18, 0xFF	; 255
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	b9 01       	movw	r22, r18
    130a:	4a e0       	ldi	r20, 0x0A	; 10
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <itoa>
	LCD_displayString(buffer);
    1312:	ce 01       	movw	r24, r28
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	0e 94 ed 08 	call	0x11da	; 0x11da <LCD_displayString>
}
    131a:	62 96       	adiw	r28, 0x12	; 18
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <LCD_clearScreen>:

/*
 * Clear Screen.
 */
void LCD_clearScreen()
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 87 08 	call	0x110e	; 0x110e <LCD_sendCommand>
}
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <wait>:
/*
 * LCD_wait .. this function used to create a delay after sending commands or data so LCD latch information.
 */

static void wait(uint8 time)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	2f 97       	sbiw	r28, 0x0f	; 15
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(time);
    1356:	8f 85       	ldd	r24, Y+15	; 0x0f
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a0 e0       	ldi	r26, 0x00	; 0
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	8b 87       	std	Y+11, r24	; 0x0b
    136e:	9c 87       	std	Y+12, r25	; 0x0c
    1370:	ad 87       	std	Y+13, r26	; 0x0d
    1372:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1374:	6b 85       	ldd	r22, Y+11	; 0x0b
    1376:	7c 85       	ldd	r23, Y+12	; 0x0c
    1378:	8d 85       	ldd	r24, Y+13	; 0x0d
    137a:	9e 85       	ldd	r25, Y+14	; 0x0e
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	4a ef       	ldi	r20, 0xFA	; 250
    1382:	54 e4       	ldi	r21, 0x44	; 68
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	8f 83       	std	Y+7, r24	; 0x07
    138e:	98 87       	std	Y+8, r25	; 0x08
    1390:	a9 87       	std	Y+9, r26	; 0x09
    1392:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e8       	ldi	r20, 0x80	; 128
    13a2:	5f e3       	ldi	r21, 0x3F	; 63
    13a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a8:	88 23       	and	r24, r24
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <wait+0x76>
		__ticks = 1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	3f c0       	rjmp	.+126    	; 0x1434 <wait+0xf4>
	else if (__tmp > 65535)
    13b6:	6f 81       	ldd	r22, Y+7	; 0x07
    13b8:	78 85       	ldd	r23, Y+8	; 0x08
    13ba:	89 85       	ldd	r24, Y+9	; 0x09
    13bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	3f ef       	ldi	r19, 0xFF	; 255
    13c2:	4f e7       	ldi	r20, 0x7F	; 127
    13c4:	57 e4       	ldi	r21, 0x47	; 71
    13c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ca:	18 16       	cp	r1, r24
    13cc:	4c f5       	brge	.+82     	; 0x1420 <wait+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e2       	ldi	r20, 0x20	; 32
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	bc 01       	movw	r22, r24
    13e8:	cd 01       	movw	r24, r26
    13ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <wait+0xd6>
    13f8:	88 ec       	ldi	r24, 0xC8	; 200
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9c 83       	std	Y+4, r25	; 0x04
    13fe:	8b 83       	std	Y+3, r24	; 0x03
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <wait+0xc4>
    1408:	9c 83       	std	Y+4, r25	; 0x04
    140a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	69 f7       	brne	.-38     	; 0x13f8 <wait+0xb8>
    141e:	14 c0       	rjmp	.+40     	; 0x1448 <wait+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1420:	6f 81       	ldd	r22, Y+7	; 0x07
    1422:	78 85       	ldd	r23, Y+8	; 0x08
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <wait+0x100>
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
}
    1448:	2f 96       	adiw	r28, 0x0f	; 15
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <high_to_low_pulse>:

static void high_to_low_pulse()
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
    1462:	a8 e3       	ldi	r26, 0x38	; 56
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e8 e3       	ldi	r30, 0x38	; 56
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	80 68       	ori	r24, 0x80	; 128
    146e:	8c 93       	st	X, r24
	wait(20);
    1470:	84 e1       	ldi	r24, 0x14	; 20
    1472:	0e 94 a0 09 	call	0x1340	; 0x1340 <wait>
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
    1476:	a8 e3       	ldi	r26, 0x38	; 56
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	8f 77       	andi	r24, 0x7F	; 127
    1482:	8c 93       	st	X, r24
	wait(1);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	0e 94 a0 09 	call	0x1340	; 0x1340 <wait>
}
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <FRONT_LOGIC_init>:
static void (*nav[ NAV_COUNTER ]) (void) = {FRONT_LOGIC_options,FRONT_LOGIC_enterPassword,FRONT_LOGIC_changePassword};
/*
 * FRONT_LOGIC init.
 */
void FRONT_LOGIC_init()
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	2e 97       	sbiw	r28, 0x0e	; 14
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
	 * 1 - init SYSTEM GUI with
	 	 * Welcome message .. and please wait to init system.
	 	 	 * Init. keypad.
	 */

	DOOR_STATUS_DDR &= (~( 1 << DOOR_STATUS ));
    14a4:	a1 e3       	ldi	r26, 0x31	; 49
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e1 e3       	ldi	r30, 0x31	; 49
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 7b       	andi	r24, 0xBF	; 191
    14b0:	8c 93       	st	X, r24
	BLOCK_USER_DDR  &= (~( 1 << BLOCK_USER ));
    14b2:	a1 e3       	ldi	r26, 0x31	; 49
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e1 e3       	ldi	r30, 0x31	; 49
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 77       	andi	r24, 0x7F	; 127
    14be:	8c 93       	st	X, r24

	SYSTEM_GUI_init();
    14c0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SYSTEM_GUI_init>
	SYSTEM_GUI_display((uint8*)"loading ..",CLEAR_DISPLAY);
    14c4:	80 e6       	ldi	r24, 0x60	; 96
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	61 e0       	ldi	r22, 0x01	; 1
    14ca:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	aa e7       	ldi	r26, 0x7A	; 122
    14d4:	b4 e4       	ldi	r27, 0x44	; 68
    14d6:	8b 87       	std	Y+11, r24	; 0x0b
    14d8:	9c 87       	std	Y+12, r25	; 0x0c
    14da:	ad 87       	std	Y+13, r26	; 0x0d
    14dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a ef       	ldi	r20, 0xFA	; 250
    14ec:	54 e4       	ldi	r21, 0x44	; 68
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8f 83       	std	Y+7, r24	; 0x07
    14f8:	98 87       	std	Y+8, r25	; 0x08
    14fa:	a9 87       	std	Y+9, r26	; 0x09
    14fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <FRONT_LOGIC_init+0x90>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	3f c0       	rjmp	.+126    	; 0x159e <FRONT_LOGIC_init+0x10e>
	else if (__tmp > 65535)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <FRONT_LOGIC_init+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <FRONT_LOGIC_init+0xf0>
    1562:	88 ec       	ldi	r24, 0xC8	; 200
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9c 83       	std	Y+4, r25	; 0x04
    1568:	8b 83       	std	Y+3, r24	; 0x03
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <FRONT_LOGIC_init+0xde>
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <FRONT_LOGIC_init+0xd2>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <FRONT_LOGIC_init+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <FRONT_LOGIC_init+0x11a>
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	UART_init();
    15b2:	0e 94 96 07 	call	0xf2c	; 0xf2c <UART_init>

}
    15b6:	2e 96       	adiw	r28, 0x0e	; 14
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <FRONT_LOGIC_run>:
 * FRONT_LOGIC run.
 * Have All Logic of FRONT_END MICRO.
 */

void FRONT_LOGIC_run()
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	0f 92       	push	r0
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	uint8 input = 0;//Related to nav system.
    15d2:	19 82       	std	Y+1, r1	; 0x01
	(*nav[nav_point])();//Load New Content.
    15d4:	80 91 ae 02 	lds	r24, 0x02AE
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	fc 01       	movw	r30, r24
    15e2:	e9 55       	subi	r30, 0x59	; 89
    15e4:	fd 4f       	sbci	r31, 0xFD	; 253
    15e6:	01 90       	ld	r0, Z+
    15e8:	f0 81       	ld	r31, Z
    15ea:	e0 2d       	mov	r30, r0
    15ec:	09 95       	icall
	do
	{
		FRONT_LOGIC_takeInput( &input );
    15ee:	ce 01       	movw	r24, r28
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <FRONT_LOGIC_takeInput>
	}while( input >= NAV_COUNTER );
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	c8 f7       	brcc	.-14     	; 0x15ee <FRONT_LOGIC_run+0x26>
	/*
	 * Identify each page user want.
	 */
	if ( (input) < NAV_COUNTER)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	20 f4       	brcc	.+8      	; 0x160a <FRONT_LOGIC_run+0x42>
		nav_point = (input);
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	80 93 ae 02 	sts	0x02AE, r24
    1608:	02 c0       	rjmp	.+4      	; 0x160e <FRONT_LOGIC_run+0x46>
	else
		nav_point = 0;//Main Page.
    160a:	10 92 ae 02 	sts	0x02AE, r1
}
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <FRONT_LOGIC_options>:
/*
 * FRONT_LOGIC_options.
 * Page 1 in nav. system.
 */
static void FRONT_LOGIC_options()
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	SYSTEM_GUI_display((uint8*)"Options : ",CLEAR_DISPLAY);
    161e:	8b e6       	ldi	r24, 0x6B	; 107
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
	SYSTEM_GUI_printNewLine(RESET_NEW_LINE);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <SYSTEM_GUI_printNewLine>
	SYSTEM_GUI_display((uint8*)"(1)- Open door",UNCLEAR_DISPLAY);
    162e:	86 e7       	ldi	r24, 0x76	; 118
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
	SYSTEM_GUI_printNewLine(UNRESET_NEW_LINE);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <SYSTEM_GUI_printNewLine>
	SYSTEM_GUI_display((uint8*)"(2)- Change Password ", UNCLEAR_DISPLAY);
    163e:	85 e8       	ldi	r24, 0x85	; 133
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
	SYSTEM_GUI_printNewLine(UNRESET_NEW_LINE);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <SYSTEM_GUI_printNewLine>
	nav_point = 0;//Navigation page number 1.
    164e:	10 92 ae 02 	sts	0x02AE, r1
	/*uint8 key;
	key = KEYPAD_getPressedKey();
	SYSTEM_GUI_displayInteger(key, CLEAR_DISPLAY);
	SYSTEM_GUI_printNewLine(RESET_NEW_LINE);*/
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <FRONT_LOGIC_takeInput>:

/*
 * FRONT_LOGIC takeInput
 */
static uint8* FRONT_LOGIC_takeInput(uint8* key_pressed)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	60 97       	sbiw	r28, 0x10	; 16
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	98 8b       	std	Y+16, r25	; 0x10
    166e:	8f 87       	std	Y+15, r24	; 0x0f
	*key_pressed = KEYPAD_getPressedKey();
    1670:	0e 94 95 06 	call	0xd2a	; 0xd2a <KEYPAD_getPressedKey>
    1674:	ef 85       	ldd	r30, Y+15	; 0x0f
    1676:	f8 89       	ldd	r31, Y+16	; 0x10
    1678:	80 83       	st	Z, r24
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	aa ef       	ldi	r26, 0xFA	; 250
    1680:	b3 e4       	ldi	r27, 0x43	; 67
    1682:	8b 87       	std	Y+11, r24	; 0x0b
    1684:	9c 87       	std	Y+12, r25	; 0x0c
    1686:	ad 87       	std	Y+13, r26	; 0x0d
    1688:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168a:	6b 85       	ldd	r22, Y+11	; 0x0b
    168c:	7c 85       	ldd	r23, Y+12	; 0x0c
    168e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1690:	9e 85       	ldd	r25, Y+14	; 0x0e
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a ef       	ldi	r20, 0xFA	; 250
    1698:	54 e4       	ldi	r21, 0x44	; 68
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8f 83       	std	Y+7, r24	; 0x07
    16a4:	98 87       	std	Y+8, r25	; 0x08
    16a6:	a9 87       	std	Y+9, r26	; 0x09
    16a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16aa:	6f 81       	ldd	r22, Y+7	; 0x07
    16ac:	78 85       	ldd	r23, Y+8	; 0x08
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	2c f4       	brge	.+10     	; 0x16cc <FRONT_LOGIC_takeInput+0x74>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9e 83       	std	Y+6, r25	; 0x06
    16c8:	8d 83       	std	Y+5, r24	; 0x05
    16ca:	3f c0       	rjmp	.+126    	; 0x174a <FRONT_LOGIC_takeInput+0xf2>
	else if (__tmp > 65535)
    16cc:	6f 81       	ldd	r22, Y+7	; 0x07
    16ce:	78 85       	ldd	r23, Y+8	; 0x08
    16d0:	89 85       	ldd	r24, Y+9	; 0x09
    16d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	57 e4       	ldi	r21, 0x47	; 71
    16dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	4c f5       	brge	.+82     	; 0x1736 <FRONT_LOGIC_takeInput+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e2       	ldi	r20, 0x20	; 32
    16f2:	51 e4       	ldi	r21, 0x41	; 65
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	0f c0       	rjmp	.+30     	; 0x172c <FRONT_LOGIC_takeInput+0xd4>
    170e:	88 ec       	ldi	r24, 0xC8	; 200
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <FRONT_LOGIC_takeInput+0xc2>
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	69 f7       	brne	.-38     	; 0x170e <FRONT_LOGIC_takeInput+0xb6>
    1734:	14 c0       	rjmp	.+40     	; 0x175e <FRONT_LOGIC_takeInput+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1736:	6f 81       	ldd	r22, Y+7	; 0x07
    1738:	78 85       	ldd	r23, Y+8	; 0x08
    173a:	89 85       	ldd	r24, Y+9	; 0x09
    173c:	9a 85       	ldd	r25, Y+10	; 0x0a
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	9e 83       	std	Y+6, r25	; 0x06
    1748:	8d 83       	std	Y+5, r24	; 0x05
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <FRONT_LOGIC_takeInput+0xfe>
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	return key_pressed;
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	98 89       	ldd	r25, Y+16	; 0x10
}
    1762:	60 96       	adiw	r28, 0x10	; 16
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <FRONT_LOGIC_goToPage>:

/*
 * FRONT_LOGIC goToPage.
 */
static void FRONT_LOGIC_goToPage(uint8 page)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	89 83       	std	Y+1, r24	; 0x01
	if ( nav_point  < NAV_COUNTER) nav_point = page;
    1780:	80 91 ae 02 	lds	r24, 0x02AE
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	18 f4       	brcc	.+6      	; 0x178e <FRONT_LOGIC_goToPage+0x1a>
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	80 93 ae 02 	sts	0x02AE, r24
	password_step = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 a6 02 	sts	0x02A6, r24

}
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <FRONT_LOGIC_enterPassword>:
 	 * 2 - After Five Number system tell user to enter '#' to confirm or '*' to return back to option.
 	 	 * After press '#' .. waiting appear on the Screen.
 	 	 * After press '*' .. return back to option page.--DONE--.
 */
static void FRONT_LOGIC_enterPassword()
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <FRONT_LOGIC_enterPassword+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <FRONT_LOGIC_enterPassword+0x8>
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <FRONT_LOGIC_enterPassword+0xa>
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	uint8 password[PASSWORD_LENGTH];
	FRONT_LOGIC_passwordGui();
    17aa:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <FRONT_LOGIC_passwordGui>
	getPassword(password, True);
    17ae:	ce 01       	movw	r24, r28
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	61 e0       	ldi	r22, 0x01	; 1
    17b4:	0e 94 56 0d 	call	0x1aac	; 0x1aac <getPassword>
}
    17b8:	26 96       	adiw	r28, 0x06	; 6
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <FRONT_LOGIC_checkPassword>:

/*
 * FRONT_LOGIC checkPassword user submit.
 */
static void FRONT_LOGIC_checkPassword(uint8* password)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	6d 97       	sbiw	r28, 0x1d	; 29
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	9d 8f       	std	Y+29, r25	; 0x1d
    17e0:	8c 8f       	std	Y+28, r24	; 0x1c
	 * 1- check password if password is true.
	 	 *  Listen to the pin which indicate that door is open and appear MSG with timer to user.
	 * 2- if wrong MSG appear the password is
	 	 * wrong and user can try again UNTIL Block signal for 2 MIN coming from back end.
	 */
	uint8 check = 0;
    17e2:	1f 86       	std	Y+15, r1	; 0x0f
	SYSTEM_GUI_display((uint8*)"Please Wait ..",CLEAR_DISPLAY);
    17e4:	8b e9       	ldi	r24, 0x9B	; 155
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
	if ( nav_point == 1 )
    17ee:	80 91 ae 02 	lds	r24, 0x02AE
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	21 f4       	brne	.+8      	; 0x17fe <FRONT_LOGIC_checkPassword+0x34>
		UART_sendByte( OPEN_DOOR_OPERATION );
    17f6:	8f e4       	ldi	r24, 0x4F	; 79
    17f8:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <FRONT_LOGIC_checkPassword+0x3a>
	else
		UART_sendByte( ENTER_NEW_PASSWORD_SIGN );
    17fe:	83 e4       	ldi	r24, 0x43	; 67
    1800:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_sendByte>
	UART_sendString(password);
    1804:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1806:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1808:	0e 94 ed 07 	call	0xfda	; 0xfda <UART_sendString>
	check = UART_receiveByte();//Check if Password true or false.
    180c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_receiveByte>
    1810:	8f 87       	std	Y+15, r24	; 0x0f

	if ( check )
    1812:	8f 85       	ldd	r24, Y+15	; 0x0f
    1814:	88 23       	and	r24, r24
    1816:	49 f1       	breq	.+82     	; 0x186a <FRONT_LOGIC_checkPassword+0xa0>
	{
		if ( nav_point == 1 )//Meaning that User Want to open door.
    1818:	80 91 ae 02 	lds	r24, 0x02AE
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	79 f4       	brne	.+30     	; 0x183e <FRONT_LOGIC_checkPassword+0x74>
			//Listen to the pin which indicate that door is open and appear MSG with timer to user.
		{
			SYSTEM_GUI_display((uint8*) "Door is open.",CLEAR_DISPLAY);
    1820:	8a ea       	ldi	r24, 0xAA	; 170
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
			while(!BIT_IS_CLEAR(DOOR_STATUS_PIN, DOOR_STATUS));
    182a:	e0 e3       	ldi	r30, 0x30	; 48
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	80 74       	andi	r24, 0x40	; 64
    1836:	90 70       	andi	r25, 0x00	; 0
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	b9 f7       	brne	.-18     	; 0x182a <FRONT_LOGIC_checkPassword+0x60>
    183c:	9d c0       	rjmp	.+314    	; 0x1978 <FRONT_LOGIC_checkPassword+0x1ae>
		}
		else if ( nav_point == 2 )//SYSTEM_GUI_display((uint8*) "Enter New Password Logic",CLEAR_DISPLAY);
    183e:	80 91 ae 02 	lds	r24, 0x02AE
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	09 f0       	breq	.+2      	; 0x1848 <FRONT_LOGIC_checkPassword+0x7e>
    1846:	98 c0       	rjmp	.+304    	; 0x1978 <FRONT_LOGIC_checkPassword+0x1ae>
			 */

			uint8 new_pass[PASSWORD_LENGTH];
			uint8 re_new_pass[PASSWORD_LENGTH];

			FRONT_LOGIC_enterNewPassword(new_pass);//Add New Password.
    1848:	ce 01       	movw	r24, r28
    184a:	40 96       	adiw	r24, 0x10	; 16
    184c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <FRONT_LOGIC_enterNewPassword>
			FRONT_LOGIC_reEnterNewPassword(re_new_pass);//re-Add New Password.
    1850:	ce 01       	movw	r24, r28
    1852:	46 96       	adiw	r24, 0x16	; 22
    1854:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <FRONT_LOGIC_reEnterNewPassword>
			FRONT_LOGIC_changePasswordChecker(new_pass, re_new_pass);
    1858:	ce 01       	movw	r24, r28
    185a:	40 96       	adiw	r24, 0x10	; 16
    185c:	9e 01       	movw	r18, r28
    185e:	2a 5e       	subi	r18, 0xEA	; 234
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	b9 01       	movw	r22, r18
    1864:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <FRONT_LOGIC_changePasswordChecker>
    1868:	87 c0       	rjmp	.+270    	; 0x1978 <FRONT_LOGIC_checkPassword+0x1ae>
		}
	}
	else
	{
		if (!BIT_IS_CLEAR(BLOCK_USER_PIN, BLOCK_USER))
    186a:	e0 e3       	ldi	r30, 0x30	; 48
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	88 23       	and	r24, r24
    1872:	5c f4       	brge	.+22     	; 0x188a <FRONT_LOGIC_checkPassword+0xc0>
		{
			SYSTEM_GUI_display((uint8*) "You tried many times door is blocked !.",CLEAR_DISPLAY);
    1874:	88 eb       	ldi	r24, 0xB8	; 184
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
			while(!BIT_IS_CLEAR(BLOCK_USER_PIN, BLOCK_USER));
    187e:	e0 e3       	ldi	r30, 0x30	; 48
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	88 23       	and	r24, r24
    1886:	dc f3       	brlt	.-10     	; 0x187e <FRONT_LOGIC_checkPassword+0xb4>
    1888:	77 c0       	rjmp	.+238    	; 0x1978 <FRONT_LOGIC_checkPassword+0x1ae>
		}else
		{
			SYSTEM_GUI_display((uint8*) "Wrong Password !",CLEAR_DISPLAY);
    188a:	80 ee       	ldi	r24, 0xE0	; 224
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e8       	ldi	r25, 0x80	; 128
    1898:	ab e3       	ldi	r26, 0x3B	; 59
    189a:	b5 e4       	ldi	r27, 0x45	; 69
    189c:	8b 87       	std	Y+11, r24	; 0x0b
    189e:	9c 87       	std	Y+12, r25	; 0x0c
    18a0:	ad 87       	std	Y+13, r26	; 0x0d
    18a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a ef       	ldi	r20, 0xFA	; 250
    18b2:	54 e4       	ldi	r21, 0x44	; 68
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8f 83       	std	Y+7, r24	; 0x07
    18be:	98 87       	std	Y+8, r25	; 0x08
    18c0:	a9 87       	std	Y+9, r26	; 0x09
    18c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <FRONT_LOGIC_checkPassword+0x11c>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <FRONT_LOGIC_checkPassword+0x19a>
	else if (__tmp > 65535)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <FRONT_LOGIC_checkPassword+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1900:	7c 85       	ldd	r23, Y+12	; 0x0c
    1902:	8d 85       	ldd	r24, Y+13	; 0x0d
    1904:	9e 85       	ldd	r25, Y+14	; 0x0e
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <FRONT_LOGIC_checkPassword+0x17c>
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	8b 83       	std	Y+3, r24	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <FRONT_LOGIC_checkPassword+0x16a>
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <FRONT_LOGIC_checkPassword+0x15e>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <FRONT_LOGIC_checkPassword+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9e 83       	std	Y+6, r25	; 0x06
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <FRONT_LOGIC_checkPassword+0x1a6>
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
		 	 //* wrong and user can try again UNTIL Block signal for 2 MIN coming from back end -- Listened by pin from back-end.
			_delay_ms(3000);
		}

	}
	password_step = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	80 93 a6 02 	sts	0x02A6, r24
	FRONT_LOGIC_options();
    197e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <FRONT_LOGIC_options>
}
    1982:	6d 96       	adiw	r28, 0x1d	; 29
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <FRONT_LOGIC_changePassword>:

/*
 * FRONT_LOGIC changePassword.
 */
static void FRONT_LOGIC_changePassword()
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
	 	 * If True.
	 	 	 * Enter New Password .. then re-enter it.
	 	 * If False.
	 	 	 * User Can try again for 3 Times UNTIL Block Signal Come from BACKEND.
	 */
	if ( password_step < 4 ) password_step++;
    199c:	80 91 a6 02 	lds	r24, 0x02A6
    19a0:	84 30       	cpi	r24, 0x04	; 4
    19a2:	28 f4       	brcc	.+10     	; 0x19ae <FRONT_LOGIC_changePassword+0x1a>
    19a4:	80 91 a6 02 	lds	r24, 0x02A6
    19a8:	8f 5f       	subi	r24, 0xFF	; 255
    19aa:	80 93 a6 02 	sts	0x02A6, r24
	if ( password_step == 2 ) FRONT_LOGIC_enterPassword();//Enter Old Password.
    19ae:	80 91 a6 02 	lds	r24, 0x02A6
    19b2:	82 30       	cpi	r24, 0x02	; 2
    19b4:	11 f4       	brne	.+4      	; 0x19ba <FRONT_LOGIC_changePassword+0x26>
    19b6:	0e 94 ce 0b 	call	0x179c	; 0x179c <FRONT_LOGIC_enterPassword>

}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <FRONT_LOGIC_passwordGui>:
/*
 * FRONT_LOGIC password GUI.
 * Indicate the type of GUI That Must Be Appear in password page.
 */
static void FRONT_LOGIC_passwordGui()
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <FRONT_LOGIC_passwordGui+0x6>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
	switch( password_step )
    19ca:	80 91 a6 02 	lds	r24, 0x02A6
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	3a 83       	std	Y+2, r19	; 0x02
    19d4:	29 83       	std	Y+1, r18	; 0x01
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	91 05       	cpc	r25, r1
    19de:	e1 f0       	breq	.+56     	; 0x1a18 <FRONT_LOGIC_passwordGui+0x58>
    19e0:	29 81       	ldd	r18, Y+1	; 0x01
    19e2:	3a 81       	ldd	r19, Y+2	; 0x02
    19e4:	23 30       	cpi	r18, 0x03	; 3
    19e6:	31 05       	cpc	r19, r1
    19e8:	34 f4       	brge	.+12     	; 0x19f6 <FRONT_LOGIC_passwordGui+0x36>
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <FRONT_LOGIC_passwordGui+0x4c>
    19f4:	22 c0       	rjmp	.+68     	; 0x1a3a <FRONT_LOGIC_passwordGui+0x7a>
    19f6:	29 81       	ldd	r18, Y+1	; 0x01
    19f8:	3a 81       	ldd	r19, Y+2	; 0x02
    19fa:	23 30       	cpi	r18, 0x03	; 3
    19fc:	31 05       	cpc	r19, r1
    19fe:	91 f0       	breq	.+36     	; 0x1a24 <FRONT_LOGIC_passwordGui+0x64>
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	91 05       	cpc	r25, r1
    1a08:	99 f0       	breq	.+38     	; 0x1a30 <FRONT_LOGIC_passwordGui+0x70>
    1a0a:	17 c0       	rjmp	.+46     	; 0x1a3a <FRONT_LOGIC_passwordGui+0x7a>
	{
		case 1:
			SYSTEM_GUI_enterPassword((uint8*)"Enter The Password", True);
    1a0c:	81 ef       	ldi	r24, 0xF1	; 241
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <SYSTEM_GUI_enterPassword>
    1a16:	11 c0       	rjmp	.+34     	; 0x1a3a <FRONT_LOGIC_passwordGui+0x7a>
			break;
		case 2:
			SYSTEM_GUI_enterPassword((uint8*)"Enter Old Password", True);
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <SYSTEM_GUI_enterPassword>
    1a22:	0b c0       	rjmp	.+22     	; 0x1a3a <FRONT_LOGIC_passwordGui+0x7a>
			break;
		case 3:
			SYSTEM_GUI_enterPassword((uint8*)"Enter New Password", False);
    1a24:	87 e1       	ldi	r24, 0x17	; 23
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <SYSTEM_GUI_enterPassword>
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <FRONT_LOGIC_passwordGui+0x7a>
			break;
		case 4:
			SYSTEM_GUI_enterPassword((uint8*)"ReEnter New Password", False);
    1a30:	8a e2       	ldi	r24, 0x2A	; 42
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <SYSTEM_GUI_enterPassword>
			break;
		default :
			break;
	}
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <FRONT_LOGIC_reEnterNewPassword>:

/*
 * FRONT_LOGIC_reEnterNewPassword
 */
static uint8* FRONT_LOGIC_reEnterNewPassword(uint8* password)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <FRONT_LOGIC_reEnterNewPassword+0x6>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
	password_step++;
    1a52:	80 91 a6 02 	lds	r24, 0x02A6
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	80 93 a6 02 	sts	0x02A6, r24
	FRONT_LOGIC_passwordGui();
    1a5c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <FRONT_LOGIC_passwordGui>
	getPassword( password, False);
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	0e 94 56 0d 	call	0x1aac	; 0x1aac <getPassword>
	return password;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <FRONT_LOGIC_enterNewPassword>:

/*
 * uint8* FRONT_LOGIC_enterNewPassword(uint8*).
 */
static uint8* FRONT_LOGIC_enterNewPassword(uint8* password)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <FRONT_LOGIC_enterNewPassword+0x6>
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
	//Enter Password.
	password_step++;
    1a86:	80 91 a6 02 	lds	r24, 0x02A6
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	80 93 a6 02 	sts	0x02A6, r24
	FRONT_LOGIC_passwordGui();
    1a90:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <FRONT_LOGIC_passwordGui>
	getPassword( password, False);
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <getPassword>
	return password;
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <getPassword>:
/*
 * FRONT_LOGIC getPassword.
 * Take Password from User.
 */
static void getPassword(uint8* password, uint8 check)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <getPassword+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <getPassword+0x8>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	9b 83       	std	Y+3, r25	; 0x03
    1aba:	8a 83       	std	Y+2, r24	; 0x02
    1abc:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    1abe:	19 82       	std	Y+1, r1	; 0x01
    1ac0:	35 c0       	rjmp	.+106    	; 0x1b2c <getPassword+0x80>

	while(i < (PASSWORD_LENGTH - 1))
	{
		FRONT_LOGIC_takeInput(&(password[i]));
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	9b 81       	ldd	r25, Y+3	; 0x03
    1acc:	82 0f       	add	r24, r18
    1ace:	93 1f       	adc	r25, r19
    1ad0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <FRONT_LOGIC_takeInput>
		if (password[i] == '*')
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e2 0f       	add	r30, r18
    1ae2:	f3 1f       	adc	r31, r19
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8a 32       	cpi	r24, 0x2A	; 42
    1ae8:	31 f4       	brne	.+12     	; 0x1af6 <getPassword+0x4a>
		{
			FRONT_LOGIC_options();
    1aea:	0e 94 0b 0b 	call	0x1616	; 0x1616 <FRONT_LOGIC_options>
			password_step = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	80 93 a6 02 	sts	0x02A6, r24
    1af4:	2c c0       	rjmp	.+88     	; 0x1b4e <getPassword+0xa2>
			return;
		}
		SYSTEM_GUI_display((uint8*)"*",UNCLEAR_DISPLAY);
    1af6:	8f e3       	ldi	r24, 0x3F	; 63
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
		password[i] = password[i] + 0x30;//Add 0x30 to convert it to ASCII.
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	a2 0f       	add	r26, r18
    1b0e:	b3 1f       	adc	r27, r19
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	e2 0f       	add	r30, r18
    1b1e:	f3 1f       	adc	r31, r19
    1b20:	80 81       	ld	r24, Z
    1b22:	80 5d       	subi	r24, 0xD0	; 208
    1b24:	8c 93       	st	X, r24
		i++;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	8f 5f       	subi	r24, 0xFF	; 255
    1b2a:	89 83       	std	Y+1, r24	; 0x01
 */
static void getPassword(uint8* password, uint8 check)
{
	uint8 i = 0;

	while(i < (PASSWORD_LENGTH - 1))
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	85 30       	cpi	r24, 0x05	; 5
    1b30:	40 f2       	brcs	.-112    	; 0x1ac2 <getPassword+0x16>
		}
		SYSTEM_GUI_display((uint8*)"*",UNCLEAR_DISPLAY);
		password[i] = password[i] + 0x30;//Add 0x30 to convert it to ASCII.
		i++;
	}
	password[i] = '\0';//Null operator add to string password.
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	e2 0f       	add	r30, r18
    1b40:	f3 1f       	adc	r31, r19
    1b42:	10 82       	st	Z, r1
	FRONT_LOGIC_confirmFromUser(password, check);
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	9b 81       	ldd	r25, Y+3	; 0x03
    1b48:	6c 81       	ldd	r22, Y+4	; 0x04
    1b4a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <FRONT_LOGIC_confirmFromUser>
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <FRONT_LOGIC_confirmFromUser>:

/*
 * FRONT_LOGIC confirm from user.
 */
static void FRONT_LOGIC_confirmFromUser(uint8* password, uint8 check)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <FRONT_LOGIC_confirmFromUser+0x6>
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <FRONT_LOGIC_confirmFromUser+0x8>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	9b 83       	std	Y+3, r25	; 0x03
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 confirm = 0;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
	SYSTEM_GUI_printAtPosition(3,0);//Line 4 Col 0.
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <SYSTEM_GUI_printAtPosition>
	SYSTEM_GUI_display((uint8*)"'#' to confirm.",UNCLEAR_DISPLAY);
    1b78:	81 e4       	ldi	r24, 0x41	; 65
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
	FRONT_LOGIC_takeInput(&(confirm));
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	0e 94 2c 0b 	call	0x1658	; 0x1658 <FRONT_LOGIC_takeInput>
	while( True )
	{
		if ( confirm == CONFIRM_SIGN)
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	83 32       	cpi	r24, 0x23	; 35
    1b8e:	41 f4       	brne	.+16     	; 0x1ba0 <FRONT_LOGIC_confirmFromUser+0x44>
		{
			if ( check == True ) FRONT_LOGIC_checkPassword(password);
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	89 f4       	brne	.+34     	; 0x1bb8 <FRONT_LOGIC_confirmFromUser+0x5c>
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <FRONT_LOGIC_checkPassword>
    1b9e:	0c c0       	rjmp	.+24     	; 0x1bb8 <FRONT_LOGIC_confirmFromUser+0x5c>
			return;
		}
		else if ( confirm == CANCEL_SIGN && (password_step < 3))
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	8a 32       	cpi	r24, 0x2A	; 42
    1ba4:	91 f7       	brne	.-28     	; 0x1b8a <FRONT_LOGIC_confirmFromUser+0x2e>
    1ba6:	80 91 a6 02 	lds	r24, 0x02A6
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	70 f7       	brcc	.-36     	; 0x1b8a <FRONT_LOGIC_confirmFromUser+0x2e>
		{
			password_step = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	80 93 a6 02 	sts	0x02A6, r24
			FRONT_LOGIC_options();
    1bb4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <FRONT_LOGIC_options>
			return;
		}
	}
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <FRONT_LOGIC_changePasswordChecker>:

/*
 * FRONT_LOGIC change password checker.
 */
void FRONT_LOGIC_changePasswordChecker(uint8* new_pass, uint8* re_new_pass)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	a0 97       	sbiw	r28, 0x20	; 32
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	9e 8f       	std	Y+30, r25	; 0x1e
    1bdc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bde:	78 a3       	std	Y+32, r23	; 0x20
    1be0:	6f 8f       	std	Y+31, r22	; 0x1f
	if ( (password_step == 4) && (strncmp((cPtrToChar)new_pass, (cPtrToChar)re_new_pass, PASSWORD_LENGTH) == False) )
    1be2:	80 91 a6 02 	lds	r24, 0x02A6
    1be6:	84 30       	cpi	r24, 0x04	; 4
    1be8:	09 f0       	breq	.+2      	; 0x1bec <FRONT_LOGIC_changePasswordChecker+0x26>
    1bea:	8b c0       	rjmp	.+278    	; 0x1d02 <FRONT_LOGIC_changePasswordChecker+0x13c>
    1bec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bf0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1bf2:	38 a1       	ldd	r19, Y+32	; 0x20
    1bf4:	b9 01       	movw	r22, r18
    1bf6:	46 e0       	ldi	r20, 0x06	; 6
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <strncmp>
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <FRONT_LOGIC_changePasswordChecker+0x3e>
    1c02:	7f c0       	rjmp	.+254    	; 0x1d02 <FRONT_LOGIC_changePasswordChecker+0x13c>
		/*
		 * 4 - if equal send it to back-end .. with operation sign.
			 * if not equal send re-peat this operation until be equal or '*'.
		 *
		 */
		UART_sendString( new_pass );
    1c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c08:	0e 94 ed 07 	call	0xfda	; 0xfda <UART_sendString>
		SYSTEM_GUI_display((uint8*)"Password Changed !",CLEAR_DISPLAY);
    1c0c:	81 e5       	ldi	r24, 0x51	; 81
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e4       	ldi	r25, 0x40	; 64
    1c1a:	ac e9       	ldi	r26, 0x9C	; 156
    1c1c:	b5 e4       	ldi	r27, 0x45	; 69
    1c1e:	89 8f       	std	Y+25, r24	; 0x19
    1c20:	9a 8f       	std	Y+26, r25	; 0x1a
    1c22:	ab 8f       	std	Y+27, r26	; 0x1b
    1c24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c26:	69 8d       	ldd	r22, Y+25	; 0x19
    1c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a ef       	ldi	r20, 0xFA	; 250
    1c34:	54 e4       	ldi	r21, 0x44	; 68
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	8d 8b       	std	Y+21, r24	; 0x15
    1c40:	9e 8b       	std	Y+22, r25	; 0x16
    1c42:	af 8b       	std	Y+23, r26	; 0x17
    1c44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c46:	6d 89       	ldd	r22, Y+21	; 0x15
    1c48:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <FRONT_LOGIC_changePasswordChecker+0xa2>
		__ticks = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
    1c66:	3f c0       	rjmp	.+126    	; 0x1ce6 <FRONT_LOGIC_changePasswordChecker+0x120>
	else if (__tmp > 65535)
    1c68:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	3f ef       	ldi	r19, 0xFF	; 255
    1c74:	4f e7       	ldi	r20, 0x7F	; 127
    1c76:	57 e4       	ldi	r21, 0x47	; 71
    1c78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	4c f5       	brge	.+82     	; 0x1cd2 <FRONT_LOGIC_changePasswordChecker+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c80:	69 8d       	ldd	r22, Y+25	; 0x19
    1c82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e2       	ldi	r20, 0x20	; 32
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9c 8b       	std	Y+20, r25	; 0x14
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
    1ca8:	0f c0       	rjmp	.+30     	; 0x1cc8 <FRONT_LOGIC_changePasswordChecker+0x102>
    1caa:	88 ec       	ldi	r24, 0xC8	; 200
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9a 8b       	std	Y+18, r25	; 0x12
    1cb0:	89 8b       	std	Y+17, r24	; 0x11
    1cb2:	89 89       	ldd	r24, Y+17	; 0x11
    1cb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <FRONT_LOGIC_changePasswordChecker+0xf0>
    1cba:	9a 8b       	std	Y+18, r25	; 0x12
    1cbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	69 f7       	brne	.-38     	; 0x1caa <FRONT_LOGIC_changePasswordChecker+0xe4>
    1cd0:	14 c0       	rjmp	.+40     	; 0x1cfa <FRONT_LOGIC_changePasswordChecker+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9c 8b       	std	Y+20, r25	; 0x14
    1ce4:	8b 8b       	std	Y+19, r24	; 0x13
    1ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cea:	98 8b       	std	Y+16, r25	; 0x10
    1cec:	8f 87       	std	Y+15, r24	; 0x0f
    1cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf0:	98 89       	ldd	r25, Y+16	; 0x10
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <FRONT_LOGIC_changePasswordChecker+0x12c>
    1cf6:	98 8b       	std	Y+16, r25	; 0x10
    1cf8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5000);
		/*
		 * Reset Flags.
		 */
		password_step = 1;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	80 93 a6 02 	sts	0x02A6, r24
    1d00:	7c c0       	rjmp	.+248    	; 0x1dfa <FRONT_LOGIC_changePasswordChecker+0x234>

	}else
	{
		SYSTEM_GUI_display((uint8*)"The Two Password not Match !",CLEAR_DISPLAY);
    1d02:	84 e6       	ldi	r24, 0x64	; 100
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	61 e0       	ldi	r22, 0x01	; 1
    1d08:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e4       	ldi	r25, 0x40	; 64
    1d10:	ac e9       	ldi	r26, 0x9C	; 156
    1d12:	b5 e4       	ldi	r27, 0x45	; 69
    1d14:	8b 87       	std	Y+11, r24	; 0x0b
    1d16:	9c 87       	std	Y+12, r25	; 0x0c
    1d18:	ad 87       	std	Y+13, r26	; 0x0d
    1d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a ef       	ldi	r20, 0xFA	; 250
    1d2a:	54 e4       	ldi	r21, 0x44	; 68
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8f 83       	std	Y+7, r24	; 0x07
    1d36:	98 87       	std	Y+8, r25	; 0x08
    1d38:	a9 87       	std	Y+9, r26	; 0x09
    1d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3e:	78 85       	ldd	r23, Y+8	; 0x08
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <FRONT_LOGIC_changePasswordChecker+0x198>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <FRONT_LOGIC_changePasswordChecker+0x216>
	else if (__tmp > 65535)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <FRONT_LOGIC_changePasswordChecker+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <FRONT_LOGIC_changePasswordChecker+0x1f8>
    1da0:	88 ec       	ldi	r24, 0xC8	; 200
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9c 83       	std	Y+4, r25	; 0x04
    1da6:	8b 83       	std	Y+3, r24	; 0x03
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <FRONT_LOGIC_changePasswordChecker+0x1e6>
    1db0:	9c 83       	std	Y+4, r25	; 0x04
    1db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <FRONT_LOGIC_changePasswordChecker+0x1da>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <FRONT_LOGIC_changePasswordChecker+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <FRONT_LOGIC_changePasswordChecker+0x222>
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
		password_step = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	80 93 a6 02 	sts	0x02A6, r24
		FRONT_LOGIC_options();
    1df6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <FRONT_LOGIC_options>
	}
}
    1dfa:	a0 96       	adiw	r28, 0x20	; 32
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <main>:
#include "frontend_logic.h"



int main()
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Init.
	 */
	FRONT_LOGIC_init();
    1e14:	0e 94 48 0a 	call	0x1490	; 0x1490 <FRONT_LOGIC_init>
	 * App.
	 */

	while( True )
	{
		FRONT_LOGIC_run();
    1e18:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <FRONT_LOGIC_run>
    1e1c:	fd cf       	rjmp	.-6      	; 0x1e18 <main+0xc>

00001e1e <SYSTEM_GUI_init>:

/*
 * SYSTEM GUI init.
 */
void SYSTEM_GUI_init()
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    1e26:	0e 94 52 08 	call	0x10a4	; 0x10a4 <LCD_init>
	KEYPAD_Init();
    1e2a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <KEYPAD_Init>
}
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <SYSTEM_GUI_display>:

/*
 * SYSTEM GUI display.
 */
void SYSTEM_GUI_display(uint8* msg, uint8 clear)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <SYSTEM_GUI_display+0x6>
    1e3a:	0f 92       	push	r0
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	6b 83       	std	Y+3, r22	; 0x03
	if ( clear ==  CLEAR_DISPLAY )
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	39 f4       	brne	.+14     	; 0x1e5a <SYSTEM_GUI_display+0x26>
	{
		LCD_clearScreen();
    1e4c:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_clearScreen>
		LCD_displayString( msg );
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	0e 94 ed 08 	call	0x11da	; 0x11da <LCD_displayString>
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <SYSTEM_GUI_display+0x2e>
	}
	else LCD_displayString( msg );
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	0e 94 ed 08 	call	0x11da	; 0x11da <LCD_displayString>
}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <SYSTEM_GUI_displayInteger>:
/*
 * SYSTEM_GUI displayInteger.
 */
void SYSTEM_GUI_displayInteger(uint16 number, uint8 clear)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <SYSTEM_GUI_displayInteger+0x6>
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6b 83       	std	Y+3, r22	; 0x03
	if ( clear ==  CLEAR_DISPLAY)
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	39 f4       	brne	.+14     	; 0x1e94 <SYSTEM_GUI_displayInteger+0x26>
	{
		LCD_clearScreen();
    1e86:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_clearScreen>
		LCD_integerToString( number );
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_integerToString>
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <SYSTEM_GUI_displayInteger+0x2e>
	}
	else LCD_integerToString( number );
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_integerToString>
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <SYSTEM_GUI_printNewLine>:
/*
 * SYSTEM_GUI_printNewLine.
 */
void SYSTEM_GUI_printNewLine(uint8 reset)//Must be modified for last line logic.
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	static uint8 lastLine = 2;
	if (reset == RESET_NEW_LINE) lastLine = 2;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	21 f4       	brne	.+8      	; 0x1ec2 <SYSTEM_GUI_printNewLine+0x1a>
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	80 93 ad 02 	sts	0x02AD, r24
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <SYSTEM_GUI_printNewLine+0x24>
	else lastLine++;
    1ec2:	80 91 ad 02 	lds	r24, 0x02AD
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	80 93 ad 02 	sts	0x02AD, r24
	LCD_goToRowColumn(lastLine,0);
    1ecc:	80 91 ad 02 	lds	r24, 0x02AD
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	0e 94 2f 09 	call	0x125e	; 0x125e <LCD_goToRowColumn>
}
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <SYSTEM_GUI_printAtPosition>:
/*
 * SYSTEM_GUI_printAtPosition
 */
void SYSTEM_GUI_printAtPosition(uint8 line, uint8 col)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <SYSTEM_GUI_printAtPosition+0x6>
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	6a 83       	std	Y+2, r22	; 0x02
	LCD_goToRowColumn( line, col);
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	6a 81       	ldd	r22, Y+2	; 0x02
    1ef0:	0e 94 2f 09 	call	0x125e	; 0x125e <LCD_goToRowColumn>
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <SYSTEM_GUI_enterPassword>:
/*
 * SYSTEM_GUI_enterPassword
 * This Function used for enter password and re-enter password.
 */
void SYSTEM_GUI_enterPassword(uint8* msg, uint8 back)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <SYSTEM_GUI_enterPassword+0x6>
    1f04:	0f 92       	push	r0
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	6b 83       	std	Y+3, r22	; 0x03
	SYSTEM_GUI_display( msg , CLEAR_DISPLAY);
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
	//Printing '*'.
	SYSTEM_GUI_printAtPosition(4,0);//Line 4 Col 0.
    1f1a:	84 e0       	ldi	r24, 0x04	; 4
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <SYSTEM_GUI_printAtPosition>
	if ( back == True )
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	29 f4       	brne	.+10     	; 0x1f32 <SYSTEM_GUI_enterPassword+0x34>
		SYSTEM_GUI_display((uint8*)"'*' return back.",UNCLEAR_DISPLAY);
    1f28:	81 e8       	ldi	r24, 0x81	; 129
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SYSTEM_GUI_display>
	//Go with crusor to the space which '*' of password appear.
	SYSTEM_GUI_printAtPosition(2,7);//Line 2 Col 7.
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	67 e0       	ldi	r22, 0x07	; 7
    1f36:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <SYSTEM_GUI_printAtPosition>
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <__prologue_saves__>:
    1f46:	2f 92       	push	r2
    1f48:	3f 92       	push	r3
    1f4a:	4f 92       	push	r4
    1f4c:	5f 92       	push	r5
    1f4e:	6f 92       	push	r6
    1f50:	7f 92       	push	r7
    1f52:	8f 92       	push	r8
    1f54:	9f 92       	push	r9
    1f56:	af 92       	push	r10
    1f58:	bf 92       	push	r11
    1f5a:	cf 92       	push	r12
    1f5c:	df 92       	push	r13
    1f5e:	ef 92       	push	r14
    1f60:	ff 92       	push	r15
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	ca 1b       	sub	r28, r26
    1f70:	db 0b       	sbc	r29, r27
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	09 94       	ijmp

00001f7e <__epilogue_restores__>:
    1f7e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f80:	39 88       	ldd	r3, Y+17	; 0x11
    1f82:	48 88       	ldd	r4, Y+16	; 0x10
    1f84:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f86:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f88:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f90:	b9 84       	ldd	r11, Y+9	; 0x09
    1f92:	c8 84       	ldd	r12, Y+8	; 0x08
    1f94:	df 80       	ldd	r13, Y+7	; 0x07
    1f96:	ee 80       	ldd	r14, Y+6	; 0x06
    1f98:	fd 80       	ldd	r15, Y+5	; 0x05
    1f9a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f9c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f9e:	aa 81       	ldd	r26, Y+2	; 0x02
    1fa0:	b9 81       	ldd	r27, Y+1	; 0x01
    1fa2:	ce 0f       	add	r28, r30
    1fa4:	d1 1d       	adc	r29, r1
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	ed 01       	movw	r28, r26
    1fb2:	08 95       	ret

00001fb4 <strlen>:
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	01 90       	ld	r0, Z+
    1fb8:	00 20       	and	r0, r0
    1fba:	e9 f7       	brne	.-6      	; 0x1fb6 <strlen+0x2>
    1fbc:	80 95       	com	r24
    1fbe:	90 95       	com	r25
    1fc0:	8e 0f       	add	r24, r30
    1fc2:	9f 1f       	adc	r25, r31
    1fc4:	08 95       	ret

00001fc6 <strncmp>:
    1fc6:	fb 01       	movw	r30, r22
    1fc8:	dc 01       	movw	r26, r24
    1fca:	41 50       	subi	r20, 0x01	; 1
    1fcc:	50 40       	sbci	r21, 0x00	; 0
    1fce:	30 f0       	brcs	.+12     	; 0x1fdc <strncmp+0x16>
    1fd0:	8d 91       	ld	r24, X+
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	80 19       	sub	r24, r0
    1fd6:	19 f4       	brne	.+6      	; 0x1fde <strncmp+0x18>
    1fd8:	00 20       	and	r0, r0
    1fda:	b9 f7       	brne	.-18     	; 0x1fca <strncmp+0x4>
    1fdc:	88 1b       	sub	r24, r24
    1fde:	99 0b       	sbc	r25, r25
    1fe0:	08 95       	ret

00001fe2 <itoa>:
    1fe2:	fb 01       	movw	r30, r22
    1fe4:	9f 01       	movw	r18, r30
    1fe6:	e8 94       	clt
    1fe8:	42 30       	cpi	r20, 0x02	; 2
    1fea:	c4 f0       	brlt	.+48     	; 0x201c <itoa+0x3a>
    1fec:	45 32       	cpi	r20, 0x25	; 37
    1fee:	b4 f4       	brge	.+44     	; 0x201c <itoa+0x3a>
    1ff0:	4a 30       	cpi	r20, 0x0A	; 10
    1ff2:	29 f4       	brne	.+10     	; 0x1ffe <itoa+0x1c>
    1ff4:	97 fb       	bst	r25, 7
    1ff6:	1e f4       	brtc	.+6      	; 0x1ffe <itoa+0x1c>
    1ff8:	90 95       	com	r25
    1ffa:	81 95       	neg	r24
    1ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffe:	64 2f       	mov	r22, r20
    2000:	77 27       	eor	r23, r23
    2002:	0e 94 22 10 	call	0x2044	; 0x2044 <__udivmodhi4>
    2006:	80 5d       	subi	r24, 0xD0	; 208
    2008:	8a 33       	cpi	r24, 0x3A	; 58
    200a:	0c f0       	brlt	.+2      	; 0x200e <itoa+0x2c>
    200c:	89 5d       	subi	r24, 0xD9	; 217
    200e:	81 93       	st	Z+, r24
    2010:	cb 01       	movw	r24, r22
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	a1 f7       	brne	.-24     	; 0x1ffe <itoa+0x1c>
    2016:	16 f4       	brtc	.+4      	; 0x201c <itoa+0x3a>
    2018:	5d e2       	ldi	r21, 0x2D	; 45
    201a:	51 93       	st	Z+, r21
    201c:	10 82       	st	Z, r1
    201e:	c9 01       	movw	r24, r18
    2020:	0c 94 12 10 	jmp	0x2024	; 0x2024 <strrev>

00002024 <strrev>:
    2024:	dc 01       	movw	r26, r24
    2026:	fc 01       	movw	r30, r24
    2028:	67 2f       	mov	r22, r23
    202a:	71 91       	ld	r23, Z+
    202c:	77 23       	and	r23, r23
    202e:	e1 f7       	brne	.-8      	; 0x2028 <strrev+0x4>
    2030:	32 97       	sbiw	r30, 0x02	; 2
    2032:	04 c0       	rjmp	.+8      	; 0x203c <strrev+0x18>
    2034:	7c 91       	ld	r23, X
    2036:	6d 93       	st	X+, r22
    2038:	70 83       	st	Z, r23
    203a:	62 91       	ld	r22, -Z
    203c:	ae 17       	cp	r26, r30
    203e:	bf 07       	cpc	r27, r31
    2040:	c8 f3       	brcs	.-14     	; 0x2034 <strrev+0x10>
    2042:	08 95       	ret

00002044 <__udivmodhi4>:
    2044:	aa 1b       	sub	r26, r26
    2046:	bb 1b       	sub	r27, r27
    2048:	51 e1       	ldi	r21, 0x11	; 17
    204a:	07 c0       	rjmp	.+14     	; 0x205a <__udivmodhi4_ep>

0000204c <__udivmodhi4_loop>:
    204c:	aa 1f       	adc	r26, r26
    204e:	bb 1f       	adc	r27, r27
    2050:	a6 17       	cp	r26, r22
    2052:	b7 07       	cpc	r27, r23
    2054:	10 f0       	brcs	.+4      	; 0x205a <__udivmodhi4_ep>
    2056:	a6 1b       	sub	r26, r22
    2058:	b7 0b       	sbc	r27, r23

0000205a <__udivmodhi4_ep>:
    205a:	88 1f       	adc	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	5a 95       	dec	r21
    2060:	a9 f7       	brne	.-22     	; 0x204c <__udivmodhi4_loop>
    2062:	80 95       	com	r24
    2064:	90 95       	com	r25
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	08 95       	ret

0000206c <_exit>:
    206c:	f8 94       	cli

0000206e <__stop_program>:
    206e:	ff cf       	rjmp	.-2      	; 0x206e <__stop_program>
