
backend_micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002136  000021ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800170  00800170  000022da  2**0
                  ALLOC
  3 .stab         000027b4  00000000  00000000  000022dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000145c  00000000  00000000  00004a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000627e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008689  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000abe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ada8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <main>
      8a:	0c 94 99 10 	jmp	0x2132	; 0x2132 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 16 10 	jmp	0x202c	; 0x202c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MOTOR_init>:

/*
 * MOTOR_init.
 */
void MOTOR_init()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*
	 * INPUT1,INPUT2,ENABLE.
	 */
	MOTOR_DDR  |= ( 1 << INPUT1 ) | ( 1 << INPUT2 ) | ( 1 << ENABLE_1 );
     e36:	a1 e3       	ldi	r26, 0x31	; 49
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e3       	ldi	r30, 0x31	; 49
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 6e       	ori	r24, 0xE0	; 224
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <MOTOR_start>:

/*
 * MOTOR_start
 */
void MOTOR_start(MOTOR_DRIVER_L239D_Direction direction)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	89 83       	std	Y+1, r24	; 0x01
	MOTOR_PORT = (MOTOR_PORT & ((~( 1 << INPUT1 )) & (~( 1 << INPUT2 )))) | (direction << INPUT1);
     e56:	a2 e3       	ldi	r26, 0x32	; 50
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e2 e3       	ldi	r30, 0x32	; 50
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	28 2f       	mov	r18, r24
     e62:	2f 79       	andi	r18, 0x9F	; 159
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	82 95       	swap	r24
     e70:	92 95       	swap	r25
     e72:	90 7f       	andi	r25, 0xF0	; 240
     e74:	98 27       	eor	r25, r24
     e76:	80 7f       	andi	r24, 0xF0	; 240
     e78:	98 27       	eor	r25, r24
     e7a:	82 2b       	or	r24, r18
     e7c:	8c 93       	st	X, r24
	MOTOR_PORT |= (1 << ENABLE_1);
     e7e:	a2 e3       	ldi	r26, 0x32	; 50
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e2 e3       	ldi	r30, 0x32	; 50
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 68       	ori	r24, 0x80	; 128
     e8a:	8c 93       	st	X, r24
	MOTOR_direction = direction;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 93 70 01 	sts	0x0170, r24
}
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <MOTOR_stop>:

/*
 * MOTOR stop.
 */
void MOTOR_stop()
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
	MOTOR_PORT &= ((~( 1 << INPUT1 )) & (~( 1 << INPUT2 )));
     ea2:	a2 e3       	ldi	r26, 0x32	; 50
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e2 e3       	ldi	r30, 0x32	; 50
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 79       	andi	r24, 0x9F	; 159
     eae:	8c 93       	st	X, r24
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <MOTOR_changeSpeed>:

/*
 * MOTOR changeSpeed
 */
void MOTOR_changeSpeed(uint8 duty)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
}
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <MOTOR_reverseDirection>:

/*
 * Motor reverse.
 */
void MOTOR_reverseDirection()
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <MOTOR_reverseDirection+0x6>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	switch( MOTOR_direction )
     ed4:	80 91 70 01 	lds	r24, 0x0170
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3a 83       	std	Y+2, r19	; 0x02
     ede:	29 83       	std	Y+1, r18	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	31 f0       	breq	.+12     	; 0xef6 <MOTOR_reverseDirection+0x2c>
     eea:	29 81       	ldd	r18, Y+1	; 0x01
     eec:	3a 81       	ldd	r19, Y+2	; 0x02
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	69 f0       	breq	.+26     	; 0xf0e <MOTOR_reverseDirection+0x44>
     ef4:	17 c0       	rjmp	.+46     	; 0xf24 <MOTOR_reverseDirection+0x5a>
	{
		case CLOCK_WISE:
			MOTOR_PORT = (MOTOR_PORT & ((~( 1 << INPUT1 )) & (~( 1 << INPUT2 )))) | (ANTI_CLOCK_WISE << INPUT1);
     ef6:	a2 e3       	ldi	r26, 0x32	; 50
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e2 e3       	ldi	r30, 0x32	; 50
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8f 79       	andi	r24, 0x9F	; 159
     f02:	80 64       	ori	r24, 0x40	; 64
     f04:	8c 93       	st	X, r24
			MOTOR_direction = ANTI_CLOCK_WISE;
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	80 93 70 01 	sts	0x0170, r24
     f0c:	0b c0       	rjmp	.+22     	; 0xf24 <MOTOR_reverseDirection+0x5a>
			break;
		case ANTI_CLOCK_WISE:
			MOTOR_PORT = (MOTOR_PORT & ((~( 1 << INPUT1 )) & (~( 1 << INPUT2 )))) | (CLOCK_WISE << INPUT1);
     f0e:	a2 e3       	ldi	r26, 0x32	; 50
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e2 e3       	ldi	r30, 0x32	; 50
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 79       	andi	r24, 0x9F	; 159
     f1a:	80 62       	ori	r24, 0x20	; 32
     f1c:	8c 93       	st	X, r24
			MOTOR_direction  = CLOCK_WISE;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 70 01 	sts	0x0170, r24
			break;
		default:
			break;
	};
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <PWM_init>:

/*
 * PWM_init.
 */
void PWM_init(PWM_CLOCK freq)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * FAST PMW Mode.
	 * non-Inverting Mode.
	 */
	TCCR0 = freq | ( 1 << WGM00 ) | ( 1 << WGM01 ) | ( 1 << COM01 );
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	88 66       	ori	r24, 0x68	; 104
     f42:	80 83       	st	Z, r24

	/*
	 * Init OC0 as output pin.
	 */
	DDR_OC0 |= ( 1 << OC0);
     f44:	a7 e3       	ldi	r26, 0x37	; 55
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e7 e3       	ldi	r30, 0x37	; 55
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	8c 93       	st	X, r24

}
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <PWM_dutyCycle>:

/*
 * PWM_dutyCycle
 */
void PWM_dutyCycle(uint8 duty)
{
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = ((((float)duty/100) * 256) - 1);
     f6a:	0c e5       	ldi	r16, 0x5C	; 92
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	48 ec       	ldi	r20, 0xC8	; 200
     f8e:	52 e4       	ldi	r21, 0x42	; 66
     f90:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	53 e4       	ldi	r21, 0x43	; 67
     fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5f e3       	ldi	r21, 0x3F	; 63
     fb8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	f8 01       	movw	r30, r16
     fce:	80 83       	st	Z, r24
}
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <PWM_changeWaveFrequency>:

/*
 * Change Wave Frequency.
 */
void PWM_changeWaveFrequency(PWM_CLOCK freq)
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (TCCR0 & (0xF8)) | (freq);
     fe8:	a3 e5       	ldi	r26, 0x53	; 83
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e3 e5       	ldi	r30, 0x53	; 83
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	98 2f       	mov	r25, r24
     ff4:	98 7f       	andi	r25, 0xF8	; 248
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	89 2b       	or	r24, r25
     ffa:	8c 93       	st	X, r24
}
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <PWM_stop>:

/*
 * Stop Wave.
 */
void PWM_stop()
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    100c:	e3 e5       	ldi	r30, 0x53	; 83
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	10 82       	st	Z, r1
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <EEPROM_init>:
 *******************************************************************************/
#include "../TWI/i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    1020:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_init>
}
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <EEPROM_writeByte+0x6>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <EEPROM_writeByte+0x8>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    103c:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1040:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1044:	88 30       	cpi	r24, 0x08	; 8
    1046:	11 f0       	breq	.+4      	; 0x104c <EEPROM_writeByte+0x22>
        return ERROR;
    1048:	1c 82       	std	Y+4, r1	; 0x04
    104a:	28 c0       	rjmp	.+80     	; 0x109c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	80 70       	andi	r24, 0x00	; 0
    1052:	97 70       	andi	r25, 0x07	; 7
    1054:	88 0f       	add	r24, r24
    1056:	89 2f       	mov	r24, r25
    1058:	88 1f       	adc	r24, r24
    105a:	99 0b       	sbc	r25, r25
    105c:	91 95       	neg	r25
    105e:	80 6a       	ori	r24, 0xA0	; 160
    1060:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1064:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1068:	88 31       	cpi	r24, 0x18	; 24
    106a:	11 f0       	breq	.+4      	; 0x1070 <EEPROM_writeByte+0x46>
        return ERROR; 
    106c:	1c 82       	std	Y+4, r1	; 0x04
    106e:	16 c0       	rjmp	.+44     	; 0x109c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1076:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    107a:	88 32       	cpi	r24, 0x28	; 40
    107c:	11 f0       	breq	.+4      	; 0x1082 <EEPROM_writeByte+0x58>
        return ERROR;
    107e:	1c 82       	std	Y+4, r1	; 0x04
    1080:	0d c0       	rjmp	.+26     	; 0x109c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1088:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    108c:	88 32       	cpi	r24, 0x28	; 40
    108e:	11 f0       	breq	.+4      	; 0x1094 <EEPROM_writeByte+0x6a>
        return ERROR;
    1090:	1c 82       	std	Y+4, r1	; 0x04
    1092:	04 c0       	rjmp	.+8      	; 0x109c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1094:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_stop>
	
    return SUCCESS;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	8c 83       	std	Y+4, r24	; 0x04
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <EEPROM_readByte+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <EEPROM_readByte+0x8>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	7c 83       	std	Y+4, r23	; 0x04
    10c0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    10c2:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
    if (TWI_getStatus() != TW_START)
    10c6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    10ca:	88 30       	cpi	r24, 0x08	; 8
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <EEPROM_readByte+0x26>
        return ERROR;
    10ce:	1d 82       	std	Y+5, r1	; 0x05
    10d0:	44 c0       	rjmp	.+136    	; 0x115a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	80 70       	andi	r24, 0x00	; 0
    10d8:	97 70       	andi	r25, 0x07	; 7
    10da:	88 0f       	add	r24, r24
    10dc:	89 2f       	mov	r24, r25
    10de:	88 1f       	adc	r24, r24
    10e0:	99 0b       	sbc	r25, r25
    10e2:	91 95       	neg	r25
    10e4:	80 6a       	ori	r24, 0xA0	; 160
    10e6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    10ea:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    10ee:	88 31       	cpi	r24, 0x18	; 24
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <EEPROM_readByte+0x4a>
        return ERROR;
    10f2:	1d 82       	std	Y+5, r1	; 0x05
    10f4:	32 c0       	rjmp	.+100    	; 0x115a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    10fc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1100:	88 32       	cpi	r24, 0x28	; 40
    1102:	11 f0       	breq	.+4      	; 0x1108 <EEPROM_readByte+0x5c>
        return ERROR;
    1104:	1d 82       	std	Y+5, r1	; 0x05
    1106:	29 c0       	rjmp	.+82     	; 0x115a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1108:	0e 94 01 0a 	call	0x1402	; 0x1402 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    110c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1110:	80 31       	cpi	r24, 0x10	; 16
    1112:	11 f0       	breq	.+4      	; 0x1118 <EEPROM_readByte+0x6c>
        return ERROR;
    1114:	1d 82       	std	Y+5, r1	; 0x05
    1116:	21 c0       	rjmp	.+66     	; 0x115a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	80 70       	andi	r24, 0x00	; 0
    111e:	97 70       	andi	r25, 0x07	; 7
    1120:	88 0f       	add	r24, r24
    1122:	89 2f       	mov	r24, r25
    1124:	88 1f       	adc	r24, r24
    1126:	99 0b       	sbc	r25, r25
    1128:	91 95       	neg	r25
    112a:	81 6a       	ori	r24, 0xA1	; 161
    112c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1130:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    1134:	80 34       	cpi	r24, 0x40	; 64
    1136:	11 f0       	breq	.+4      	; 0x113c <EEPROM_readByte+0x90>
        return ERROR;
    1138:	1d 82       	std	Y+5, r1	; 0x05
    113a:	0f c0       	rjmp	.+30     	; 0x115a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    113c:	0e 94 46 0a 	call	0x148c	; 0x148c <TWI_readWithNACK>
    1140:	eb 81       	ldd	r30, Y+3	; 0x03
    1142:	fc 81       	ldd	r31, Y+4	; 0x04
    1144:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1146:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_getStatus>
    114a:	88 35       	cpi	r24, 0x58	; 88
    114c:	11 f0       	breq	.+4      	; 0x1152 <EEPROM_readByte+0xa6>
        return ERROR;
    114e:	1d 82       	std	Y+5, r1	; 0x05
    1150:	04 c0       	rjmp	.+8      	; 0x115a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1152:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_stop>
    return SUCCESS;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <UART_init>:

/*
 * UART init.
 */
void UART_init()
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	 	 * USBS -> Stop bit select.--init--
	 	 * UCSZ2:1 -> Helps choosing the number of data bits in your frame .. standard 8-bit 3 (Initial Value is 3 by default).--init--.
	 * UBRRL - UBRRH -> set baud rate.--init--.
	 	 * URSEL -> must be set to zero when writing UBRRH.
	 */
	SET_BIT(UCSRC, URSEL);
    1174:	a0 e4       	ldi	r26, 0x40	; 64
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e0 e4       	ldi	r30, 0x40	; 64
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 68       	ori	r24, 0x80	; 128
    1180:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC, UMSEL);//ASYNC Mode.
    1182:	a0 e4       	ldi	r26, 0x40	; 64
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e0 e4       	ldi	r30, 0x40	; 64
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 7b       	andi	r24, 0xBF	; 191
    118e:	8c 93       	st	X, r24

	/*
	 * Set BaudRate.
	 */
	CLEAR_BIT(UCSRC, URSEL);
    1190:	a0 e4       	ldi	r26, 0x40	; 64
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e0 e4       	ldi	r30, 0x40	; 64
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8f 77       	andi	r24, 0x7F	; 127
    119c:	8c 93       	st	X, r24
	UBRRL = UBRR_VALUE;
    119e:	e9 e2       	ldi	r30, 0x29	; 41
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	87 e6       	ldi	r24, 0x67	; 103
    11a4:	80 83       	st	Z, r24
	UBRRH = UBRR_VALUE >> 8;
    11a6:	e0 e4       	ldi	r30, 0x40	; 64
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	10 82       	st	Z, r1
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <UART_sendByte>:

/*
 * UART sending byte.
 */
void UART_sendByte(const uint8 byte)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	0f 92       	push	r0
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	89 83       	std	Y+1, r24	; 0x01
		 	 * RXCIE -> RX complete interrupt enable.
		 	 * TXCIE -> TX complete interrupt enable.
		 	 * RXEN  -> Receiver Enable.
		 	 * TXEN  -> Transmitter Enable. --sendByte--.
	*/
	SET_BIT(UCSRB, TXEN);
    11be:	aa e2       	ldi	r26, 0x2A	; 42
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ea e2       	ldi	r30, 0x2A	; 42
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 60       	ori	r24, 0x08	; 8
    11ca:	8c 93       	st	X, r24
	UDR = byte;
    11cc:	ec e2       	ldi	r30, 0x2C	; 44
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(UCSRA, UDRE) );//Polling Operation.
    11d4:	eb e2       	ldi	r30, 0x2B	; 43
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	80 72       	andi	r24, 0x20	; 32
    11e0:	90 70       	andi	r25, 0x00	; 0
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	b9 f3       	breq	.-18     	; 0x11d4 <UART_sendByte+0x22>
}
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <UART_receiveByte>:

/*
 * UART receive byte.
 */
uint8 UART_receiveByte()
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
			 * RXCIE -> RX complete interrupt enable.
			 * TXCIE -> TX complete interrupt enable.
			 * RXEN  -> Receiver Enable.--receiveByte--.
			 * TXEN  -> Transmitter Enable. --sendByte--.
	*/
	SET_BIT(UCSRB, RXEN);
    11f6:	aa e2       	ldi	r26, 0x2A	; 42
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ea e2       	ldi	r30, 0x2A	; 42
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 61       	ori	r24, 0x10	; 16
    1202:	8c 93       	st	X, r24
	while( BIT_IS_CLEAR(UCSRA , RXC) );
    1204:	eb e2       	ldi	r30, 0x2B	; 43
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	88 23       	and	r24, r24
    120c:	dc f7       	brge	.-10     	; 0x1204 <UART_receiveByte+0x16>
	//RXC Cleared by CPU when no data in data-in buffer.
	return UDR;
    120e:	ec e2       	ldi	r30, 0x2C	; 44
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <UART_sendString>:

/*
 * UART sendString.
 */
void UART_sendString(uint8* string)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	62 97       	sbiw	r28, 0x12	; 18
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	9a 8b       	std	Y+18, r25	; 0x12
    1230:	89 8b       	std	Y+17, r24	; 0x11
	/*
	 * To send string and understandable by the receiver .. first byte will have the number of bytes coming from transmitter.
	 */
	uint8 length = strlen( (const char*)string );
    1232:	89 89       	ldd	r24, Y+17	; 0x11
    1234:	9a 89       	ldd	r25, Y+18	; 0x12
    1236:	0e 94 3d 10 	call	0x207a	; 0x207a <strlen>
    123a:	88 8b       	std	Y+16, r24	; 0x10

	/*
	 * Sending length of string first.
	 */
	UART_sendByte(length);
    123c:	88 89       	ldd	r24, Y+16	; 0x10
    123e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <UART_sendByte>
	/*
	 * Then sending byte byte to receiver.
	 */
	uint8 i = 0;
    1242:	1f 86       	std	Y+15, r1	; 0x0f
    1244:	80 c0       	rjmp	.+256    	; 0x1346 <UART_sendString+0x12c>
	while( *(string + i) != '\0' )
	{
		UART_sendByte( *(string + i) );
    1246:	8f 85       	ldd	r24, Y+15	; 0x0f
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	89 89       	ldd	r24, Y+17	; 0x11
    124e:	9a 89       	ldd	r25, Y+18	; 0x12
    1250:	fc 01       	movw	r30, r24
    1252:	e2 0f       	add	r30, r18
    1254:	f3 1f       	adc	r31, r19
    1256:	80 81       	ld	r24, Z
    1258:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <UART_sendByte>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 e2       	ldi	r26, 0x20	; 32
    1262:	b1 e4       	ldi	r27, 0x41	; 65
    1264:	8b 87       	std	Y+11, r24	; 0x0b
    1266:	9c 87       	std	Y+12, r25	; 0x0c
    1268:	ad 87       	std	Y+13, r26	; 0x0d
    126a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6b 85       	ldd	r22, Y+11	; 0x0b
    126e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8f 83       	std	Y+7, r24	; 0x07
    1286:	98 87       	std	Y+8, r25	; 0x08
    1288:	a9 87       	std	Y+9, r26	; 0x09
    128a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <UART_sendString+0x94>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <UART_sendString+0x112>
	else if (__tmp > 65535)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <UART_sendString+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <UART_sendString+0xf4>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <UART_sendString+0xe2>
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <UART_sendString+0xd6>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <UART_sendString+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <UART_sendString+0x11e>
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		i++;
    1340:	8f 85       	ldd	r24, Y+15	; 0x0f
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	8f 87       	std	Y+15, r24	; 0x0f
	UART_sendByte(length);
	/*
	 * Then sending byte byte to receiver.
	 */
	uint8 i = 0;
	while( *(string + i) != '\0' )
    1346:	8f 85       	ldd	r24, Y+15	; 0x0f
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	89 89       	ldd	r24, Y+17	; 0x11
    134e:	9a 89       	ldd	r25, Y+18	; 0x12
    1350:	fc 01       	movw	r30, r24
    1352:	e2 0f       	add	r30, r18
    1354:	f3 1f       	adc	r31, r19
    1356:	80 81       	ld	r24, Z
    1358:	88 23       	and	r24, r24
    135a:	09 f0       	breq	.+2      	; 0x135e <UART_sendString+0x144>
    135c:	74 cf       	rjmp	.-280    	; 0x1246 <UART_sendString+0x2c>
	{
		UART_sendByte( *(string + i) );
		_delay_ms(10);
		i++;
	}
}
    135e:	62 96       	adiw	r28, 0x12	; 18
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <UART_receiveString>:

/*
 * UART receive string.
 */
void UART_receiveString(uint8* string)
{
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <UART_receiveString+0xa>
    137a:	00 d0       	rcall	.+0      	; 0x137c <UART_receiveString+0xc>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 * First coming byte is the length of string.
	 */
	uint8 length = UART_receiveByte();
    1384:	0e 94 f7 08 	call	0x11ee	; 0x11ee <UART_receiveByte>
    1388:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    138a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Loop to get all string.
	 */
	do
	{
		*(string + i) = UART_receiveByte();
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	8c 01       	movw	r16, r24
    1398:	02 0f       	add	r16, r18
    139a:	13 1f       	adc	r17, r19
    139c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <UART_receiveByte>
    13a0:	f8 01       	movw	r30, r16
    13a2:	80 83       	st	Z, r24
		i++;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	89 83       	std	Y+1, r24	; 0x01
	}while( i < length );
    13aa:	99 81       	ldd	r25, Y+1	; 0x01
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	98 17       	cp	r25, r24
    13b0:	68 f3       	brcs	.-38     	; 0x138c <UART_receiveString+0x1c>
	//Put Null Operator.
	*(string + i) = '\0';
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	fc 01       	movw	r30, r24
    13be:	e2 0f       	add	r30, r18
    13c0:	f3 1f       	adc	r31, r19
    13c2:	10 82       	st	Z, r1
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    13de:	e0 e2       	ldi	r30, 0x20	; 32
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	80 83       	st	Z, r24
	TWSR = 0x00;
    13e6:	e1 e2       	ldi	r30, 0x21	; 33
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    13ec:	e2 e2       	ldi	r30, 0x22	; 34
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    13f4:	e6 e5       	ldi	r30, 0x56	; 86
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	80 83       	st	Z, r24
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <TWI_start>:

void TWI_start(void)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    140a:	e6 e5       	ldi	r30, 0x56	; 86
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	84 ea       	ldi	r24, 0xA4	; 164
    1410:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1412:	e6 e5       	ldi	r30, 0x56	; 86
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	88 23       	and	r24, r24
    141a:	dc f7       	brge	.-10     	; 0x1412 <TWI_start+0x10>
}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <TWI_stop>:

void TWI_stop(void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    142a:	e6 e5       	ldi	r30, 0x56	; 86
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	84 e9       	ldi	r24, 0x94	; 148
    1430:	80 83       	st	Z, r24
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <TWI_write>:

void TWI_write(uint8 data)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1444:	e3 e2       	ldi	r30, 0x23	; 35
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    144c:	e6 e5       	ldi	r30, 0x56	; 86
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	84 e8       	ldi	r24, 0x84	; 132
    1452:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1454:	e6 e5       	ldi	r30, 0x56	; 86
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 23       	and	r24, r24
    145c:	dc f7       	brge	.-10     	; 0x1454 <TWI_write+0x1c>
}
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    146e:	e6 e5       	ldi	r30, 0x56	; 86
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	84 ec       	ldi	r24, 0xC4	; 196
    1474:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1476:	e6 e5       	ldi	r30, 0x56	; 86
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	dc f7       	brge	.-10     	; 0x1476 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1480:	e3 e2       	ldi	r30, 0x23	; 35
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1494:	e6 e5       	ldi	r30, 0x56	; 86
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	84 e8       	ldi	r24, 0x84	; 132
    149a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    149c:	e6 e5       	ldi	r30, 0x56	; 86
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 23       	and	r24, r24
    14a4:	dc f7       	brge	.-10     	; 0x149c <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    14a6:	e3 e2       	ldi	r30, 0x23	; 35
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	0f 92       	push	r0
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    14bc:	e1 e2       	ldi	r30, 0x21	; 33
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 7f       	andi	r24, 0xF8	; 248
    14c4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <LCD_init>:

/*
 * Init LCD.
 */
void LCD_init()
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
	 * init all ports D0 .. D7 as output port.
	 * RS, RW, ENABLE pins     as output port.
	 * in 8-bit mode to init.
	 */
	//init RS, RW, ENABLE pins.
	SET_BIT(LCD_CONTROL_DDR, LCD_RS);
    14d8:	a7 e3       	ldi	r26, 0x37	; 55
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e7 e3       	ldi	r30, 0x37	; 55
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 62       	ori	r24, 0x20	; 32
    14e4:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_RW);
    14e6:	a7 e3       	ldi	r26, 0x37	; 55
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e7 e3       	ldi	r30, 0x37	; 55
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 64       	ori	r24, 0x40	; 64
    14f2:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_ENABLE_PIN);
    14f4:	a7 e3       	ldi	r26, 0x37	; 55
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e7 e3       	ldi	r30, 0x37	; 55
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	8c 93       	st	X, r24
	LCD_sendCommand(0x38);
#elif LCD_MODE == 4
#ifdef HIGH_PINS
	LCD_DDR = LCD_DDR | 0xF0;
#else
	LCD_DDR = LCD_DDR  | 0x0F;
    1502:	a7 e3       	ldi	r26, 0x37	; 55
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e3       	ldi	r30, 0x37	; 55
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 60       	ori	r24, 0x0F	; 15
    150e:	8c 93       	st	X, r24
#endif
	LCD_sendCommand(0x33);
    1510:	83 e3       	ldi	r24, 0x33	; 51
    1512:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_sendCommand>
	LCD_sendCommand(0x32);
    1516:	82 e3       	ldi	r24, 0x32	; 50
    1518:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_sendCommand>
	LCD_sendCommand(0x28);
    151c:	88 e2       	ldi	r24, 0x28	; 40
    151e:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_sendCommand>
#else
	#error "Error Wrong mode for LCD"
#endif
	LCD_sendCommand(0x0E);
    1522:	8e e0       	ldi	r24, 0x0E	; 14
    1524:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_sendCommand>
	LCD_sendCommand(0x01);
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_sendCommand>
	wait(1);
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	0e 94 b6 0b 	call	0x176c	; 0x176c <wait>
}
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <LCD_sendCommand>:

/*
 * LCD send Command.
 */
void LCD_sendCommand(uint8 cmd)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	0f 92       	push	r0
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
	 	 * E enable bit high-to-low pulse.
	 	 * delay about 20ms.
	 	 * send cmd.
	 	 * delay about 20ms.
	 */
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RS);
    1546:	a8 e3       	ldi	r26, 0x38	; 56
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 7d       	andi	r24, 0xDF	; 223
    1552:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW);
    1554:	a8 e3       	ldi	r26, 0x38	; 56
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e8 e3       	ldi	r30, 0x38	; 56
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7b       	andi	r24, 0xBF	; 191
    1560:	8c 93       	st	X, r24
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (cmd << 4);
	high_to_low_pulse();
#else
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0xF0) |  (cmd >> 4);
    1562:	a8 e3       	ldi	r26, 0x38	; 56
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e8 e3       	ldi	r30, 0x38	; 56
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	98 2f       	mov	r25, r24
    156e:	90 7f       	andi	r25, 0xF0	; 240
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	82 95       	swap	r24
    1574:	8f 70       	andi	r24, 0x0F	; 15
    1576:	89 2b       	or	r24, r25
    1578:	8c 93       	st	X, r24
	high_to_low_pulse();
    157a:	0e 94 43 0c 	call	0x1886	; 0x1886 <high_to_low_pulse>
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0xF0) |  (cmd & 0x0F);
    157e:	a8 e3       	ldi	r26, 0x38	; 56
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e8 e3       	ldi	r30, 0x38	; 56
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	98 2f       	mov	r25, r24
    158a:	90 7f       	andi	r25, 0xF0	; 240
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	8f 70       	andi	r24, 0x0F	; 15
    1590:	89 2b       	or	r24, r25
    1592:	8c 93       	st	X, r24
	high_to_low_pulse();
    1594:	0e 94 43 0c 	call	0x1886	; 0x1886 <high_to_low_pulse>
#endif

#endif
}
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <LCD_displayCharacter>:

/*
 * LCD display Character.
 */
void LCD_displayCharacter(uint8 character)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
	 * E High-to-low pulse.
	 * delay.
	 * Write Data.
	 * delay to latch.
	 */
	SET_BIT(LCD_CONTROL_PORT,   LCD_RS);
    15ac:	a8 e3       	ldi	r26, 0x38	; 56
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e8 e3       	ldi	r30, 0x38	; 56
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 62       	ori	r24, 0x20	; 32
    15b8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW);
    15ba:	a8 e3       	ldi	r26, 0x38	; 56
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e8 e3       	ldi	r30, 0x38	; 56
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 7b       	andi	r24, 0xBF	; 191
    15c6:	8c 93       	st	X, r24
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (character << 4);
	high_to_low_pulse();
#else
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0xF0) |  (character >> 4);
    15c8:	a8 e3       	ldi	r26, 0x38	; 56
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	98 2f       	mov	r25, r24
    15d4:	90 7f       	andi	r25, 0xF0	; 240
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	82 95       	swap	r24
    15da:	8f 70       	andi	r24, 0x0F	; 15
    15dc:	89 2b       	or	r24, r25
    15de:	8c 93       	st	X, r24
	high_to_low_pulse();
    15e0:	0e 94 43 0c 	call	0x1886	; 0x1886 <high_to_low_pulse>
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0xF0) |  (character & 0x0F);
    15e4:	a8 e3       	ldi	r26, 0x38	; 56
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 e3       	ldi	r30, 0x38	; 56
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	98 2f       	mov	r25, r24
    15f0:	90 7f       	andi	r25, 0xF0	; 240
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	8f 70       	andi	r24, 0x0F	; 15
    15f6:	89 2b       	or	r24, r25
    15f8:	8c 93       	st	X, r24
	high_to_low_pulse();
    15fa:	0e 94 43 0c 	call	0x1886	; 0x1886 <high_to_low_pulse>

#endif

#endif
}
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <LCD_displayString>:

/*
 * Display string.
 */
void LCD_displayString(uint8* string)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <LCD_displayString+0x6>
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	9b 83       	std	Y+3, r25	; 0x03
    1614:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1616:	19 82       	std	Y+1, r1	; 0x01
    1618:	0e c0       	rjmp	.+28     	; 0x1636 <LCD_displayString+0x30>

	while( *(string + i) != '\0' )
	{
		LCD_displayCharacter(*(string + i));
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	fc 01       	movw	r30, r24
    1626:	e2 0f       	add	r30, r18
    1628:	f3 1f       	adc	r31, r19
    162a:	80 81       	ld	r24, Z
    162c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_displayCharacter>
		i++;
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(uint8* string)
{
	uint8 i = 0;

	while( *(string + i) != '\0' )
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	9b 81       	ldd	r25, Y+3	; 0x03
    1640:	fc 01       	movw	r30, r24
    1642:	e2 0f       	add	r30, r18
    1644:	f3 1f       	adc	r31, r19
    1646:	80 81       	ld	r24, Z
    1648:	88 23       	and	r24, r24
    164a:	39 f7       	brne	.-50     	; 0x161a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*(string + i));
		i++;
	}
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <LCD_displayStringRowCol>:
/*
 * Display string at specific location.
 */

void LCD_displayStringRowCol(uint8* string, uint8 row, uint8 col)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <LCD_displayStringRowCol+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <LCD_displayStringRowCol+0x8>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	9a 83       	std	Y+2, r25	; 0x02
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	6b 83       	std	Y+3, r22	; 0x03
    166a:	4c 83       	std	Y+4, r20	; 0x04
	LCD_goToRowColumn( row, col );
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	6c 81       	ldd	r22, Y+4	; 0x04
    1670:	0e 94 45 0b 	call	0x168a	; 0x168a <LCD_goToRowColumn>
	LCD_displayString(string);
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	0e 94 03 0b 	call	0x1606	; 0x1606 <LCD_displayString>
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <LCD_goToRowColumn>:
/*
 * Go to row column.
 * This Starts address for LM044L display.
 */
void LCD_goToRowColumn(uint8 row, uint8 col)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <LCD_goToRowColumn+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <LCD_goToRowColumn+0x8>
    1692:	0f 92       	push	r0
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3d 83       	std	Y+5, r19	; 0x05
    16a4:	2c 83       	std	Y+4, r18	; 0x04
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	91 05       	cpc	r25, r1
    16ae:	d1 f0       	breq	.+52     	; 0x16e4 <LCD_goToRowColumn+0x5a>
    16b0:	2c 81       	ldd	r18, Y+4	; 0x04
    16b2:	3d 81       	ldd	r19, Y+5	; 0x05
    16b4:	23 30       	cpi	r18, 0x03	; 3
    16b6:	31 05       	cpc	r19, r1
    16b8:	34 f4       	brge	.+12     	; 0x16c6 <LCD_goToRowColumn+0x3c>
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	61 f0       	breq	.+24     	; 0x16dc <LCD_goToRowColumn+0x52>
    16c4:	1a c0       	rjmp	.+52     	; 0x16fa <LCD_goToRowColumn+0x70>
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	23 30       	cpi	r18, 0x03	; 3
    16cc:	31 05       	cpc	r19, r1
    16ce:	71 f0       	breq	.+28     	; 0x16ec <LCD_goToRowColumn+0x62>
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	91 05       	cpc	r25, r1
    16d8:	69 f0       	breq	.+26     	; 0x16f4 <LCD_goToRowColumn+0x6a>
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <LCD_goToRowColumn+0x70>
	{
		case 1:
			address = 0x80 + col;
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	80 58       	subi	r24, 0x80	; 128
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	0b c0       	rjmp	.+22     	; 0x16fa <LCD_goToRowColumn+0x70>
			break;
		case 2:
			address = 0xC0 + col;
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	80 54       	subi	r24, 0x40	; 64
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <LCD_goToRowColumn+0x70>
			break;
		case 3:
			address = 0x94 + col;
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	8c 56       	subi	r24, 0x6C	; 108
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <LCD_goToRowColumn+0x70>
			break;
		case 4:
			address = 0xD4 + col;
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	8c 52       	subi	r24, 0x2C	; 44
    16f8:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_sendCommand( address | 0x80 );
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	80 68       	ori	r24, 0x80	; 128
    16fe:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_sendCommand>
}
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <LCD_integerToString>:

/*
 * Integer to ascii.
 */
void LCD_integerToString(uint16 number)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	62 97       	sbiw	r28, 0x12	; 18
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	9a 8b       	std	Y+18, r25	; 0x12
    1728:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16];
	itoa(number, buffer, 10);
    172a:	89 89       	ldd	r24, Y+17	; 0x11
    172c:	9a 89       	ldd	r25, Y+18	; 0x12
    172e:	9e 01       	movw	r18, r28
    1730:	2f 5f       	subi	r18, 0xFF	; 255
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	b9 01       	movw	r22, r18
    1736:	4a e0       	ldi	r20, 0x0A	; 10
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <itoa>
	LCD_displayString(buffer);
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	0e 94 03 0b 	call	0x1606	; 0x1606 <LCD_displayString>
}
    1746:	62 96       	adiw	r28, 0x12	; 18
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <LCD_clearScreen>:

/*
 * Clear Screen.
 */
void LCD_clearScreen()
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_sendCommand>
}
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <wait>:
/*
 * LCD_wait .. this function used to create a delay after sending commands or data so LCD latch information.
 */

static void wait(uint8 time)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	2f 97       	sbiw	r28, 0x0f	; 15
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(time);
    1782:	8f 85       	ldd	r24, Y+15	; 0x0f
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8b 87       	std	Y+11, r24	; 0x0b
    179a:	9c 87       	std	Y+12, r25	; 0x0c
    179c:	ad 87       	std	Y+13, r26	; 0x0d
    179e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4a ef       	ldi	r20, 0xFA	; 250
    17ae:	54 e4       	ldi	r21, 0x44	; 68
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	8f 83       	std	Y+7, r24	; 0x07
    17ba:	98 87       	std	Y+8, r25	; 0x08
    17bc:	a9 87       	std	Y+9, r26	; 0x09
    17be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <wait+0x76>
		__ticks = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <wait+0xf4>
	else if (__tmp > 65535)
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	4c f5       	brge	.+82     	; 0x184c <wait+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <wait+0xd6>
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <wait+0xc4>
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <wait+0xb8>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <wait+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <wait+0x100>
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
}
    1874:	2f 96       	adiw	r28, 0x0f	; 15
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <high_to_low_pulse>:

static void high_to_low_pulse()
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
    188e:	a8 e3       	ldi	r26, 0x38	; 56
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e8 e3       	ldi	r30, 0x38	; 56
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	80 68       	ori	r24, 0x80	; 128
    189a:	8c 93       	st	X, r24
	wait(20);
    189c:	84 e1       	ldi	r24, 0x14	; 20
    189e:	0e 94 b6 0b 	call	0x176c	; 0x176c <wait>
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
    18a2:	a8 e3       	ldi	r26, 0x38	; 56
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e8 e3       	ldi	r30, 0x38	; 56
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 77       	andi	r24, 0x7F	; 127
    18ae:	8c 93       	st	X, r24
	wait(1);
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	0e 94 b6 0b 	call	0x176c	; 0x176c <wait>
}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <BACKEND_LOGIC_init>:
static uint8 try_counter = 0;
/*
 * BACKEND_LOGIC_init
 */
void BACKEND_LOGIC_init()
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	0f 92       	push	r0
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	UART_init();
    18c6:	0e 94 b6 08 	call	0x116c	; 0x116c <UART_init>
	EEPROM_init();
    18ca:	0e 94 0c 08 	call	0x1018	; 0x1018 <EEPROM_init>
	MOTOR_init();
    18ce:	0e 94 17 07 	call	0xe2e	; 0xe2e <MOTOR_init>
	/*
	 * Init LED Indicators.
	 */
	DOOR_STATUS_DDR |= ( 1 << DOOR_STATUS_PIN );
    18d2:	aa e3       	ldi	r26, 0x3A	; 58
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ea e3       	ldi	r30, 0x3A	; 58
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	81 60       	ori	r24, 0x01	; 1
    18de:	8c 93       	st	X, r24
	BLOCK_USER_DDR  |= ( 1 << BLOCK_USER_PIN );
    18e0:	aa e3       	ldi	r26, 0x3A	; 58
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ea e3       	ldi	r30, 0x3A	; 58
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	82 60       	ori	r24, 0x02	; 2
    18ec:	8c 93       	st	X, r24
	BUZZER_DDR      |= ( 1 << BUZZER_PIN );
    18ee:	a1 e3       	ldi	r26, 0x31	; 49
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e1 e3       	ldi	r30, 0x31	; 49
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 61       	ori	r24, 0x10	; 16
    18fa:	8c 93       	st	X, r24
	* 1 - check if there's a password in EEPROM.
	* if no change it .. Put default password '12345'.--DONE--.
	*/
	uint8 first_character;

	if ((first_character > 0x39) || ( first_character < 0x30 ))
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	8a 33       	cpi	r24, 0x3A	; 58
    1900:	18 f4       	brcc	.+6      	; 0x1908 <BACKEND_LOGIC_init+0x4c>
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	80 33       	cpi	r24, 0x30	; 48
    1906:	20 f4       	brcc	.+8      	; 0x1910 <BACKEND_LOGIC_init+0x54>
	{
		BACKEND_LOGIC_putPassword(default_pass);
    1908:	89 e6       	ldi	r24, 0x69	; 105
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <BACKEND_LOGIC_putPassword>
	}


}
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <BACKEND_LOGIC_listen>:

/*
 * BACKEND_LOGIC_run.
 */
void BACKEND_LOGIC_listen()
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 1 - take the coming operation from FRONT_END.
	 * 2 - go to logic associated with this operation.
	 */
	operation = UART_receiveByte();
    1920:	0e 94 f7 08 	call	0x11ee	; 0x11ee <UART_receiveByte>
    1924:	80 93 68 01 	sts	0x0168, r24
	BACKEND_LOGIC_action();
    1928:	0e 94 99 0c 	call	0x1932	; 0x1932 <BACKEND_LOGIC_action>

}
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <BACKEND_LOGIC_action>:

/*
 * BACKEND_LOGIC_action.
 */
static void BACKEND_LOGIC_action()
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	e1 97       	sbiw	r28, 0x31	; 49
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
	 */
	uint8 password[ PASSWORD_LENGTH ];

	uint8 eeprom_password[ PASSWORD_LENGTH ];//Password Saved in EEPROM.

	UART_receiveString(password);//Take Password from user.
    1946:	ce 01       	movw	r24, r28
    1948:	4e 96       	adiw	r24, 0x1e	; 30
    194a:	0e 94 b8 09 	call	0x1370	; 0x1370 <UART_receiveString>
	BACKEND_LOGIC_getPassword(eeprom_password);//Save Password.
    194e:	ce 01       	movw	r24, r28
    1950:	84 96       	adiw	r24, 0x24	; 36
    1952:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <BACKEND_LOGIC_getPassword>

	uint8 check = !(strncmp( (const char*)password , (const char*)eeprom_password, PASSWORD_LENGTH));//Check two pass.
    1956:	ce 01       	movw	r24, r28
    1958:	4e 96       	adiw	r24, 0x1e	; 30
    195a:	9e 01       	movw	r18, r28
    195c:	2c 5d       	subi	r18, 0xDC	; 220
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	b9 01       	movw	r22, r18
    1962:	46 e0       	ldi	r20, 0x06	; 6
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	0e 94 46 10 	call	0x208c	; 0x208c <strncmp>
    196a:	1d 8e       	std	Y+29, r1	; 0x1d
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	11 f4       	brne	.+4      	; 0x1974 <BACKEND_LOGIC_action+0x42>
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 changePassword[ PASSWORD_LENGTH ];

	switch( operation )
    1974:	80 91 68 01 	lds	r24, 0x0168
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	39 ab       	std	Y+49, r19	; 0x31
    197e:	28 ab       	std	Y+48, r18	; 0x30
    1980:	88 a9       	ldd	r24, Y+48	; 0x30
    1982:	99 a9       	ldd	r25, Y+49	; 0x31
    1984:	83 34       	cpi	r24, 0x43	; 67
    1986:	91 05       	cpc	r25, r1
    1988:	09 f4       	brne	.+2      	; 0x198c <BACKEND_LOGIC_action+0x5a>
    198a:	0c c1       	rjmp	.+536    	; 0x1ba4 <BACKEND_LOGIC_action+0x272>
    198c:	28 a9       	ldd	r18, Y+48	; 0x30
    198e:	39 a9       	ldd	r19, Y+49	; 0x31
    1990:	2f 34       	cpi	r18, 0x4F	; 79
    1992:	31 05       	cpc	r19, r1
    1994:	09 f0       	breq	.+2      	; 0x1998 <BACKEND_LOGIC_action+0x66>
    1996:	17 c1       	rjmp	.+558    	; 0x1bc6 <BACKEND_LOGIC_action+0x294>
			 * 1 - check password.
			 	 * if true open the door.
			 	 * else counter 3 times before blocked user and buzzer work for 30 sec.
			 */
			//LCD_displayString((uint8*)"Open Door Operation.");
			if ( check == True )
    1998:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	09 f0       	breq	.+2      	; 0x19a0 <BACKEND_LOGIC_action+0x6e>
    199e:	ff c0       	rjmp	.+510    	; 0x1b9e <BACKEND_LOGIC_action+0x26c>
				 * 2 - change door status to 'ON'.--DONE--.
				 * 3 - wait for 40 sec.
				 * 4 - door closed anti-clock.
				 * 5 - door status to 'OFF'.
				 */
				UART_sendByte(True);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <UART_sendByte>
				MOTOR_start(CLOCK_WISE);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	0e 94 25 07 	call	0xe4a	; 0xe4a <MOTOR_start>
				DOOR_STATUS_PORT |= ( 1 << DOOR_STATUS_PIN );
    19ac:	ab e3       	ldi	r26, 0x3B	; 59
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	eb e3       	ldi	r30, 0x3B	; 59
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	81 60       	ori	r24, 0x01	; 1
    19b8:	8c 93       	st	X, r24
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e4       	ldi	r25, 0x40	; 64
    19be:	ac e1       	ldi	r26, 0x1C	; 28
    19c0:	b6 e4       	ldi	r27, 0x46	; 70
    19c2:	89 8f       	std	Y+25, r24	; 0x19
    19c4:	9a 8f       	std	Y+26, r25	; 0x1a
    19c6:	ab 8f       	std	Y+27, r26	; 0x1b
    19c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ca:	69 8d       	ldd	r22, Y+25	; 0x19
    19cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4a ef       	ldi	r20, 0xFA	; 250
    19d8:	54 e4       	ldi	r21, 0x44	; 68
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8d 8b       	std	Y+21, r24	; 0x15
    19e4:	9e 8b       	std	Y+22, r25	; 0x16
    19e6:	af 8b       	std	Y+23, r26	; 0x17
    19e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ea:	6d 89       	ldd	r22, Y+21	; 0x15
    19ec:	7e 89       	ldd	r23, Y+22	; 0x16
    19ee:	8f 89       	ldd	r24, Y+23	; 0x17
    19f0:	98 8d       	ldd	r25, Y+24	; 0x18
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <BACKEND_LOGIC_action+0xda>
		__ticks = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 8b       	std	Y+20, r25	; 0x14
    1a08:	8b 8b       	std	Y+19, r24	; 0x13
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <BACKEND_LOGIC_action+0x158>
	else if (__tmp > 65535)
    1a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	4c f5       	brge	.+82     	; 0x1a76 <BACKEND_LOGIC_action+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a24:	69 8d       	ldd	r22, Y+25	; 0x19
    1a26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9c 8b       	std	Y+20, r25	; 0x14
    1a4a:	8b 8b       	std	Y+19, r24	; 0x13
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <BACKEND_LOGIC_action+0x13a>
    1a4e:	88 ec       	ldi	r24, 0xC8	; 200
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	89 8b       	std	Y+17, r24	; 0x11
    1a56:	89 89       	ldd	r24, Y+17	; 0x11
    1a58:	9a 89       	ldd	r25, Y+18	; 0x12
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <BACKEND_LOGIC_action+0x128>
    1a5e:	9a 8b       	std	Y+18, r25	; 0x12
    1a60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	9c 8b       	std	Y+20, r25	; 0x14
    1a6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <BACKEND_LOGIC_action+0x11c>
    1a74:	14 c0       	rjmp	.+40     	; 0x1a9e <BACKEND_LOGIC_action+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a76:	6d 89       	ldd	r22, Y+21	; 0x15
    1a78:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
    1a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a94:	98 89       	ldd	r25, Y+16	; 0x10
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <BACKEND_LOGIC_action+0x164>
    1a9a:	98 8b       	std	Y+16, r25	; 0x10
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10000);
				MOTOR_reverseDirection();
    1a9e:	0e 94 65 07 	call	0xeca	; 0xeca <MOTOR_reverseDirection>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e4       	ldi	r25, 0x40	; 64
    1aa6:	ac e1       	ldi	r26, 0x1C	; 28
    1aa8:	b6 e4       	ldi	r27, 0x46	; 70
    1aaa:	8b 87       	std	Y+11, r24	; 0x0b
    1aac:	9c 87       	std	Y+12, r25	; 0x0c
    1aae:	ad 87       	std	Y+13, r26	; 0x0d
    1ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a ef       	ldi	r20, 0xFA	; 250
    1ac0:	54 e4       	ldi	r21, 0x44	; 68
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	8f 83       	std	Y+7, r24	; 0x07
    1acc:	98 87       	std	Y+8, r25	; 0x08
    1ace:	a9 87       	std	Y+9, r26	; 0x09
    1ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <BACKEND_LOGIC_action+0x1c2>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <BACKEND_LOGIC_action+0x240>
	else if (__tmp > 65535)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <BACKEND_LOGIC_action+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <BACKEND_LOGIC_action+0x222>
    1b36:	88 ec       	ldi	r24, 0xC8	; 200
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <BACKEND_LOGIC_action+0x210>
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <BACKEND_LOGIC_action+0x204>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <BACKEND_LOGIC_action+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <BACKEND_LOGIC_action+0x24c>
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10000);
				DOOR_STATUS_PORT &= (~( 1 << DOOR_STATUS_PIN ));
    1b86:	ab e3       	ldi	r26, 0x3B	; 59
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	eb e3       	ldi	r30, 0x3B	; 59
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8e 7f       	andi	r24, 0xFE	; 254
    1b92:	8c 93       	st	X, r24
				MOTOR_stop();
    1b94:	0e 94 4d 07 	call	0xe9a	; 0xe9a <MOTOR_stop>
				try_counter = 0;
    1b98:	10 92 71 01 	sts	0x0171, r1
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <BACKEND_LOGIC_action+0x294>
			}else
			{
				BACKEND_LOGIC_wrongPassword();
    1b9e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <BACKEND_LOGIC_wrongPassword>
    1ba2:	11 c0       	rjmp	.+34     	; 0x1bc6 <BACKEND_LOGIC_action+0x294>
			/*
			 * 1 - change password in the EEPROM.
			 * if password changed .. send true to FRONTEND.
			 * else false.
			 */
			if ( check == True )
    1ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	61 f4       	brne	.+24     	; 0x1bc2 <BACKEND_LOGIC_action+0x290>
			{
				UART_sendByte(True);//Right Password.
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <UART_sendByte>
				UART_receiveString(changePassword);
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	8a 96       	adiw	r24, 0x2a	; 42
    1bb4:	0e 94 b8 09 	call	0x1370	; 0x1370 <UART_receiveString>
				BACKEND_LOGIC_changePassword(changePassword);
    1bb8:	ce 01       	movw	r24, r28
    1bba:	8a 96       	adiw	r24, 0x2a	; 42
    1bbc:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <BACKEND_LOGIC_changePassword>
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <BACKEND_LOGIC_action+0x294>
			}else
			{
				BACKEND_LOGIC_wrongPassword();
    1bc2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <BACKEND_LOGIC_wrongPassword>
			}
			break;
		default:
			break;
	}
}
    1bc6:	e1 96       	adiw	r28, 0x31	; 49
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <BACKEND_LOGIC_changePassword>:

/*
 * BACKEND_LOGIC_changePassword.
 */
static uint8 BACKEND_LOGIC_changePassword(uint8* password)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <BACKEND_LOGIC_changePassword+0x6>
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
	BACKEND_LOGIC_putPassword(password);
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <BACKEND_LOGIC_putPassword>
	return True;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <BACKEND_LOGIC_getPassword>:
/*
 * BACKEND_LOGIC_getPassword.
 * get password from EEPROM.
 */
static void BACKEND_LOGIC_getPassword(uint8* password)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	61 97       	sbiw	r28, 0x11	; 17
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	99 8b       	std	Y+17, r25	; 0x11
    1c10:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    1c12:	1f 86       	std	Y+15, r1	; 0x0f
    1c14:	86 c0       	rjmp	.+268    	; 0x1d22 <BACKEND_LOGIC_getPassword+0x128>
	{
		EEPROM_readByte((PWD_ADDRESS + i) ,(password + i));
    1c16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	8f 55       	subi	r24, 0x5F	; 95
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	ac 01       	movw	r20, r24
    1c22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	88 89       	ldd	r24, Y+16	; 0x10
    1c2a:	99 89       	ldd	r25, Y+17	; 0x11
    1c2c:	28 0f       	add	r18, r24
    1c2e:	39 1f       	adc	r19, r25
    1c30:	ca 01       	movw	r24, r20
    1c32:	b9 01       	movw	r22, r18
    1c34:	0e 94 56 08 	call	0x10ac	; 0x10ac <EEPROM_readByte>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 e7       	ldi	r26, 0x70	; 112
    1c3e:	b1 e4       	ldi	r27, 0x41	; 65
    1c40:	8b 87       	std	Y+11, r24	; 0x0b
    1c42:	9c 87       	std	Y+12, r25	; 0x0c
    1c44:	ad 87       	std	Y+13, r26	; 0x0d
    1c46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a ef       	ldi	r20, 0xFA	; 250
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8f 83       	std	Y+7, r24	; 0x07
    1c62:	98 87       	std	Y+8, r25	; 0x08
    1c64:	a9 87       	std	Y+9, r26	; 0x09
    1c66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <BACKEND_LOGIC_getPassword+0x90>
		__ticks = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <BACKEND_LOGIC_getPassword+0x10e>
	else if (__tmp > 65535)
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	4c f5       	brge	.+82     	; 0x1cf4 <BACKEND_LOGIC_getPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e2       	ldi	r20, 0x20	; 32
    1cb0:	51 e4       	ldi	r21, 0x41	; 65
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <BACKEND_LOGIC_getPassword+0xf0>
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <BACKEND_LOGIC_getPassword+0xde>
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <BACKEND_LOGIC_getPassword+0xd2>
    1cf2:	14 c0       	rjmp	.+40     	; 0x1d1c <BACKEND_LOGIC_getPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <BACKEND_LOGIC_getPassword+0x11a>
    1d18:	9a 83       	std	Y+2, r25	; 0x02
    1d1a:	89 83       	std	Y+1, r24	; 0x01
 * get password from EEPROM.
 */
static void BACKEND_LOGIC_getPassword(uint8* password)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    1d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	8f 87       	std	Y+15, r24	; 0x0f
    1d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d24:	86 30       	cpi	r24, 0x06	; 6
    1d26:	08 f4       	brcc	.+2      	; 0x1d2a <BACKEND_LOGIC_getPassword+0x130>
    1d28:	76 cf       	rjmp	.-276    	; 0x1c16 <BACKEND_LOGIC_getPassword+0x1c>
	{
		EEPROM_readByte((PWD_ADDRESS + i) ,(password + i));
		_delay_ms(15);
	}
	*(password + i ) = '\0';
    1d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	88 89       	ldd	r24, Y+16	; 0x10
    1d32:	99 89       	ldd	r25, Y+17	; 0x11
    1d34:	fc 01       	movw	r30, r24
    1d36:	e2 0f       	add	r30, r18
    1d38:	f3 1f       	adc	r31, r19
    1d3a:	10 82       	st	Z, r1
}
    1d3c:	61 96       	adiw	r28, 0x11	; 17
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <BACKEND_LOGIC_putPassword>:
/*
 * BACKEND_LOGIC_putPassword.
 * put password in EEPROM.
 */
static void BACKEND_LOGIC_putPassword(uint8* password)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	61 97       	sbiw	r28, 0x11	; 17
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	99 8b       	std	Y+17, r25	; 0x11
    1d64:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    1d66:	1f 86       	std	Y+15, r1	; 0x0f
    1d68:	88 c0       	rjmp	.+272    	; 0x1e7a <BACKEND_LOGIC_putPassword+0x12c>
	{
		EEPROM_writeByte((PWD_ADDRESS + i), *(password + i));
    1d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	8f 55       	subi	r24, 0x5F	; 95
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	ac 01       	movw	r20, r24
    1d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	88 89       	ldd	r24, Y+16	; 0x10
    1d7e:	99 89       	ldd	r25, Y+17	; 0x11
    1d80:	fc 01       	movw	r30, r24
    1d82:	e2 0f       	add	r30, r18
    1d84:	f3 1f       	adc	r31, r19
    1d86:	20 81       	ld	r18, Z
    1d88:	ca 01       	movw	r24, r20
    1d8a:	62 2f       	mov	r22, r18
    1d8c:	0e 94 15 08 	call	0x102a	; 0x102a <EEPROM_writeByte>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e7       	ldi	r26, 0x70	; 112
    1d96:	b1 e4       	ldi	r27, 0x41	; 65
    1d98:	8b 87       	std	Y+11, r24	; 0x0b
    1d9a:	9c 87       	std	Y+12, r25	; 0x0c
    1d9c:	ad 87       	std	Y+13, r26	; 0x0d
    1d9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a ef       	ldi	r20, 0xFA	; 250
    1dae:	54 e4       	ldi	r21, 0x44	; 68
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8f 83       	std	Y+7, r24	; 0x07
    1dba:	98 87       	std	Y+8, r25	; 0x08
    1dbc:	a9 87       	std	Y+9, r26	; 0x09
    1dbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <BACKEND_LOGIC_putPassword+0x94>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	3f c0       	rjmp	.+126    	; 0x1e60 <BACKEND_LOGIC_putPassword+0x112>
	else if (__tmp > 65535)
    1de2:	6f 81       	ldd	r22, Y+7	; 0x07
    1de4:	78 85       	ldd	r23, Y+8	; 0x08
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	3f ef       	ldi	r19, 0xFF	; 255
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	57 e4       	ldi	r21, 0x47	; 71
    1df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	4c f5       	brge	.+82     	; 0x1e4c <BACKEND_LOGIC_putPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	51 e4       	ldi	r21, 0x41	; 65
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <BACKEND_LOGIC_putPassword+0xf4>
    1e24:	88 ec       	ldi	r24, 0xC8	; 200
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <BACKEND_LOGIC_putPassword+0xe2>
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <BACKEND_LOGIC_putPassword+0xd6>
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <BACKEND_LOGIC_putPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4e:	78 85       	ldd	r23, Y+8	; 0x08
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <BACKEND_LOGIC_putPassword+0x11e>
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
 * put password in EEPROM.
 */
static void BACKEND_LOGIC_putPassword(uint8* password)
{
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++)
    1e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e76:	8f 5f       	subi	r24, 0xFF	; 255
    1e78:	8f 87       	std	Y+15, r24	; 0x0f
    1e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7c:	86 30       	cpi	r24, 0x06	; 6
    1e7e:	08 f4       	brcc	.+2      	; 0x1e82 <BACKEND_LOGIC_putPassword+0x134>
    1e80:	74 cf       	rjmp	.-280    	; 0x1d6a <BACKEND_LOGIC_putPassword+0x1c>
	{
		EEPROM_writeByte((PWD_ADDRESS + i), *(password + i));
		_delay_ms(15);
	}
}
    1e82:	61 96       	adiw	r28, 0x11	; 17
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <BACKEND_LOGIC_wrongPassword>:

/*
 * BACKEND_LOGIC_wrongPassword.
 */
static void BACKEND_LOGIC_wrongPassword()
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(False);//Send false to the front end wrong password.
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <UART_sendByte>
	/*
	* 1 - counter_wrong_password++.
	* 2 - if counter_wrong password == 3 (BUZZER_WORK for 30 sec)
		* BLOCKED_USER 'ON' .. for 30 MIN.
	*/
	try_counter++;
    1eae:	80 91 71 01 	lds	r24, 0x0171
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	80 93 71 01 	sts	0x0171, r24
	if ( try_counter == 3 )
    1eb8:	80 91 71 01 	lds	r24, 0x0171
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <BACKEND_LOGIC_wrongPassword+0x2e>
    1ec0:	90 c0       	rjmp	.+288    	; 0x1fe2 <BACKEND_LOGIC_wrongPassword+0x14e>
	/*
	 * BUZZER WORK .. for 30 sec.
	 * BLOCKED_USER_ON .. for 30 sec.
	*/

		BUZZER_PORT |= ( 1 << BUZZER_PIN );
    1ec2:	a2 e3       	ldi	r26, 0x32	; 50
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e2 e3       	ldi	r30, 0x32	; 50
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 61       	ori	r24, 0x10	; 16
    1ece:	8c 93       	st	X, r24
		BLOCK_USER_PORT |= ( 1 << BLOCK_USER_PIN );
    1ed0:	ab e3       	ldi	r26, 0x3B	; 59
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	eb e3       	ldi	r30, 0x3B	; 59
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	82 60       	ori	r24, 0x02	; 2
    1edc:	8c 93       	st	X, r24
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e4       	ldi	r25, 0x40	; 64
    1ee2:	ac e1       	ldi	r26, 0x1C	; 28
    1ee4:	b6 e4       	ldi	r27, 0x46	; 70
    1ee6:	8b 87       	std	Y+11, r24	; 0x0b
    1ee8:	9c 87       	std	Y+12, r25	; 0x0c
    1eea:	ad 87       	std	Y+13, r26	; 0x0d
    1eec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a ef       	ldi	r20, 0xFA	; 250
    1efc:	54 e4       	ldi	r21, 0x44	; 68
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8f 83       	std	Y+7, r24	; 0x07
    1f08:	98 87       	std	Y+8, r25	; 0x08
    1f0a:	a9 87       	std	Y+9, r26	; 0x09
    1f0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e8       	ldi	r20, 0x80	; 128
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <BACKEND_LOGIC_wrongPassword+0x9c>
		__ticks = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	3f c0       	rjmp	.+126    	; 0x1fae <BACKEND_LOGIC_wrongPassword+0x11a>
	else if (__tmp > 65535)
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	78 85       	ldd	r23, Y+8	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	4c f5       	brge	.+82     	; 0x1f9a <BACKEND_LOGIC_wrongPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <BACKEND_LOGIC_wrongPassword+0xfc>
    1f72:	88 ec       	ldi	r24, 0xC8	; 200
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <BACKEND_LOGIC_wrongPassword+0xea>
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	69 f7       	brne	.-38     	; 0x1f72 <BACKEND_LOGIC_wrongPassword+0xde>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <BACKEND_LOGIC_wrongPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	78 85       	ldd	r23, Y+8	; 0x08
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <BACKEND_LOGIC_wrongPassword+0x126>
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10000);
		BUZZER_PORT &= (~( 1 << BUZZER_PIN ));
    1fc2:	a2 e3       	ldi	r26, 0x32	; 50
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e2 e3       	ldi	r30, 0x32	; 50
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8f 7e       	andi	r24, 0xEF	; 239
    1fce:	8c 93       	st	X, r24
		BLOCK_USER_PORT &= (~( 1 << BLOCK_USER_PIN ));
    1fd0:	ab e3       	ldi	r26, 0x3B	; 59
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	eb e3       	ldi	r30, 0x3B	; 59
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8d 7f       	andi	r24, 0xFD	; 253
    1fdc:	8c 93       	st	X, r24
		try_counter = 0;
    1fde:	10 92 71 01 	sts	0x0171, r1
	}
}
    1fe2:	2e 96       	adiw	r28, 0x0e	; 14
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <main>:
#include "common_macros.h"
#include "data_type.h"
#include "micro_config.h"
#include "backend_logic.h"
int main()
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <main+0x6>
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <main+0x8>
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <main+0xa>
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Init.
	 */
	BACKEND_LOGIC_init();
    2002:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <BACKEND_LOGIC_init>
	 * App.
	 */
	uint8 password[6];
	while( True )
	{
		BACKEND_LOGIC_listen();
    2006:	0e 94 8c 0c 	call	0x1918	; 0x1918 <BACKEND_LOGIC_listen>
    200a:	fd cf       	rjmp	.-6      	; 0x2006 <main+0x12>

0000200c <__prologue_saves__>:
    200c:	2f 92       	push	r2
    200e:	3f 92       	push	r3
    2010:	4f 92       	push	r4
    2012:	5f 92       	push	r5
    2014:	6f 92       	push	r6
    2016:	7f 92       	push	r7
    2018:	8f 92       	push	r8
    201a:	9f 92       	push	r9
    201c:	af 92       	push	r10
    201e:	bf 92       	push	r11
    2020:	cf 92       	push	r12
    2022:	df 92       	push	r13
    2024:	ef 92       	push	r14
    2026:	ff 92       	push	r15
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	ca 1b       	sub	r28, r26
    2036:	db 0b       	sbc	r29, r27
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	09 94       	ijmp

00002044 <__epilogue_restores__>:
    2044:	2a 88       	ldd	r2, Y+18	; 0x12
    2046:	39 88       	ldd	r3, Y+17	; 0x11
    2048:	48 88       	ldd	r4, Y+16	; 0x10
    204a:	5f 84       	ldd	r5, Y+15	; 0x0f
    204c:	6e 84       	ldd	r6, Y+14	; 0x0e
    204e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2050:	8c 84       	ldd	r8, Y+12	; 0x0c
    2052:	9b 84       	ldd	r9, Y+11	; 0x0b
    2054:	aa 84       	ldd	r10, Y+10	; 0x0a
    2056:	b9 84       	ldd	r11, Y+9	; 0x09
    2058:	c8 84       	ldd	r12, Y+8	; 0x08
    205a:	df 80       	ldd	r13, Y+7	; 0x07
    205c:	ee 80       	ldd	r14, Y+6	; 0x06
    205e:	fd 80       	ldd	r15, Y+5	; 0x05
    2060:	0c 81       	ldd	r16, Y+4	; 0x04
    2062:	1b 81       	ldd	r17, Y+3	; 0x03
    2064:	aa 81       	ldd	r26, Y+2	; 0x02
    2066:	b9 81       	ldd	r27, Y+1	; 0x01
    2068:	ce 0f       	add	r28, r30
    206a:	d1 1d       	adc	r29, r1
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	ed 01       	movw	r28, r26
    2078:	08 95       	ret

0000207a <strlen>:
    207a:	fc 01       	movw	r30, r24
    207c:	01 90       	ld	r0, Z+
    207e:	00 20       	and	r0, r0
    2080:	e9 f7       	brne	.-6      	; 0x207c <strlen+0x2>
    2082:	80 95       	com	r24
    2084:	90 95       	com	r25
    2086:	8e 0f       	add	r24, r30
    2088:	9f 1f       	adc	r25, r31
    208a:	08 95       	ret

0000208c <strncmp>:
    208c:	fb 01       	movw	r30, r22
    208e:	dc 01       	movw	r26, r24
    2090:	41 50       	subi	r20, 0x01	; 1
    2092:	50 40       	sbci	r21, 0x00	; 0
    2094:	30 f0       	brcs	.+12     	; 0x20a2 <strncmp+0x16>
    2096:	8d 91       	ld	r24, X+
    2098:	01 90       	ld	r0, Z+
    209a:	80 19       	sub	r24, r0
    209c:	19 f4       	brne	.+6      	; 0x20a4 <strncmp+0x18>
    209e:	00 20       	and	r0, r0
    20a0:	b9 f7       	brne	.-18     	; 0x2090 <strncmp+0x4>
    20a2:	88 1b       	sub	r24, r24
    20a4:	99 0b       	sbc	r25, r25
    20a6:	08 95       	ret

000020a8 <itoa>:
    20a8:	fb 01       	movw	r30, r22
    20aa:	9f 01       	movw	r18, r30
    20ac:	e8 94       	clt
    20ae:	42 30       	cpi	r20, 0x02	; 2
    20b0:	c4 f0       	brlt	.+48     	; 0x20e2 <itoa+0x3a>
    20b2:	45 32       	cpi	r20, 0x25	; 37
    20b4:	b4 f4       	brge	.+44     	; 0x20e2 <itoa+0x3a>
    20b6:	4a 30       	cpi	r20, 0x0A	; 10
    20b8:	29 f4       	brne	.+10     	; 0x20c4 <itoa+0x1c>
    20ba:	97 fb       	bst	r25, 7
    20bc:	1e f4       	brtc	.+6      	; 0x20c4 <itoa+0x1c>
    20be:	90 95       	com	r25
    20c0:	81 95       	neg	r24
    20c2:	9f 4f       	sbci	r25, 0xFF	; 255
    20c4:	64 2f       	mov	r22, r20
    20c6:	77 27       	eor	r23, r23
    20c8:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodhi4>
    20cc:	80 5d       	subi	r24, 0xD0	; 208
    20ce:	8a 33       	cpi	r24, 0x3A	; 58
    20d0:	0c f0       	brlt	.+2      	; 0x20d4 <itoa+0x2c>
    20d2:	89 5d       	subi	r24, 0xD9	; 217
    20d4:	81 93       	st	Z+, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	a1 f7       	brne	.-24     	; 0x20c4 <itoa+0x1c>
    20dc:	16 f4       	brtc	.+4      	; 0x20e2 <itoa+0x3a>
    20de:	5d e2       	ldi	r21, 0x2D	; 45
    20e0:	51 93       	st	Z+, r21
    20e2:	10 82       	st	Z, r1
    20e4:	c9 01       	movw	r24, r18
    20e6:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <strrev>

000020ea <strrev>:
    20ea:	dc 01       	movw	r26, r24
    20ec:	fc 01       	movw	r30, r24
    20ee:	67 2f       	mov	r22, r23
    20f0:	71 91       	ld	r23, Z+
    20f2:	77 23       	and	r23, r23
    20f4:	e1 f7       	brne	.-8      	; 0x20ee <strrev+0x4>
    20f6:	32 97       	sbiw	r30, 0x02	; 2
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <strrev+0x18>
    20fa:	7c 91       	ld	r23, X
    20fc:	6d 93       	st	X+, r22
    20fe:	70 83       	st	Z, r23
    2100:	62 91       	ld	r22, -Z
    2102:	ae 17       	cp	r26, r30
    2104:	bf 07       	cpc	r27, r31
    2106:	c8 f3       	brcs	.-14     	; 0x20fa <strrev+0x10>
    2108:	08 95       	ret

0000210a <__udivmodhi4>:
    210a:	aa 1b       	sub	r26, r26
    210c:	bb 1b       	sub	r27, r27
    210e:	51 e1       	ldi	r21, 0x11	; 17
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <__udivmodhi4_ep>

00002112 <__udivmodhi4_loop>:
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	a6 17       	cp	r26, r22
    2118:	b7 07       	cpc	r27, r23
    211a:	10 f0       	brcs	.+4      	; 0x2120 <__udivmodhi4_ep>
    211c:	a6 1b       	sub	r26, r22
    211e:	b7 0b       	sbc	r27, r23

00002120 <__udivmodhi4_ep>:
    2120:	88 1f       	adc	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	5a 95       	dec	r21
    2126:	a9 f7       	brne	.-22     	; 0x2112 <__udivmodhi4_loop>
    2128:	80 95       	com	r24
    212a:	90 95       	com	r25
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	08 95       	ret

00002132 <_exit>:
    2132:	f8 94       	cli

00002134 <__stop_program>:
    2134:	ff cf       	rjmp	.-2      	; 0x2134 <__stop_program>
